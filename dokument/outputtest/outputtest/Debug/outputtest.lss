
outputtest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000100  00800100  0000043c  000004d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000043c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013f  00800200  00800200  000005d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000600  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000715  00000000  00000000  000006a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002f1  00000000  00000000  00000dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031d  00000000  00000000  000010ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000021c  00000000  00000000  000013cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000030b  00000000  00000000  000015e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000540  00000000  00000000  000018f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00001e33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <__vector_9>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__vector_13>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 96 01 	jmp	0x32c	; 0x32c <__vector_16>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	12 e0       	ldi	r17, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e3       	ldi	r30, 0x3C	; 60
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	23 e0       	ldi	r18, 0x03	; 3
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b2 e0       	ldi	r27, 0x02	; 2
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	af 33       	cpi	r26, 0x3F	; 63
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 0a 02 	call	0x414	; 0x414 <main>
  c6:	0c 94 1c 02 	jmp	0x438	; 0x438 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <l74hc165_init>:
/*
 * init the shift register
 */
void l74hc165_init() {
	//output
	L74HC165_DDR |= (1 << L74HC165_CLOCKPIN);
  ce:	24 9a       	sbi	0x04, 4	; 4
	L74HC165_DDR |= (1 << L74HC165_LOADPIN);
  d0:	20 9a       	sbi	0x04, 0	; 4
	//input
	L74HC165_DDR &= ~(1 << L74HC165_DATAPIN);
  d2:	26 98       	cbi	0x04, 6	; 4
	//low
	L74HC165_PORT &= ~(1 << L74HC165_CLOCKPIN);
  d4:	2c 98       	cbi	0x05, 4	; 5
	L74HC165_PORT &= ~(1 << L74HC165_LOADPIN);
  d6:	28 98       	cbi	0x05, 0	; 5
  d8:	08 95       	ret

000000da <populate_buttons>:
}
*/
void populate_buttons()
{
	
	if(data & 1)
  da:	80 91 33 02 	lds	r24, 0x0233
  de:	90 91 34 02 	lds	r25, 0x0234
  e2:	80 ff       	sbrs	r24, 0
  e4:	04 c0       	rjmp	.+8      	; 0xee <populate_buttons+0x14>
		keys[11] = 1;
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	20 93 32 02 	sts	0x0232, r18
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <populate_buttons+0x18>
	else
		keys[11] = 0;
  ee:	10 92 32 02 	sts	0x0232, r1
		
	if(data & (1<<1))
  f2:	81 ff       	sbrs	r24, 1
  f4:	04 c0       	rjmp	.+8      	; 0xfe <populate_buttons+0x24>
	keys[10] = 1;
  f6:	21 e0       	ldi	r18, 0x01	; 1
  f8:	20 93 31 02 	sts	0x0231, r18
  fc:	02 c0       	rjmp	.+4      	; 0x102 <populate_buttons+0x28>
	else
	keys[10] = 0;
  fe:	10 92 31 02 	sts	0x0231, r1
	
	if(data & (1<<2))
 102:	82 ff       	sbrs	r24, 2
 104:	04 c0       	rjmp	.+8      	; 0x10e <populate_buttons+0x34>
	keys[9] = 1;
 106:	21 e0       	ldi	r18, 0x01	; 1
 108:	20 93 30 02 	sts	0x0230, r18
 10c:	02 c0       	rjmp	.+4      	; 0x112 <populate_buttons+0x38>
	else
	keys[9] = 0;
 10e:	10 92 30 02 	sts	0x0230, r1
	
	if(data & (1<<3))
 112:	83 ff       	sbrs	r24, 3
 114:	04 c0       	rjmp	.+8      	; 0x11e <populate_buttons+0x44>
	keys[8] = 1;
 116:	21 e0       	ldi	r18, 0x01	; 1
 118:	20 93 2f 02 	sts	0x022F, r18
 11c:	02 c0       	rjmp	.+4      	; 0x122 <populate_buttons+0x48>
	else
	keys[8] = 0;
 11e:	10 92 2f 02 	sts	0x022F, r1
	
	if(data & (1<<4))
 122:	84 ff       	sbrs	r24, 4
 124:	04 c0       	rjmp	.+8      	; 0x12e <populate_buttons+0x54>
	keys[7] = 1;
 126:	21 e0       	ldi	r18, 0x01	; 1
 128:	20 93 2e 02 	sts	0x022E, r18
 12c:	02 c0       	rjmp	.+4      	; 0x132 <populate_buttons+0x58>
	else
	keys[7] = 0;
 12e:	10 92 2e 02 	sts	0x022E, r1
	
	if(data & (1<<5))
 132:	85 ff       	sbrs	r24, 5
 134:	04 c0       	rjmp	.+8      	; 0x13e <populate_buttons+0x64>
	keys[6] = 1;
 136:	21 e0       	ldi	r18, 0x01	; 1
 138:	20 93 2d 02 	sts	0x022D, r18
 13c:	02 c0       	rjmp	.+4      	; 0x142 <populate_buttons+0x68>
	else
	keys[6] = 0;
 13e:	10 92 2d 02 	sts	0x022D, r1
	
	if(data & (1<<6))
 142:	86 ff       	sbrs	r24, 6
 144:	04 c0       	rjmp	.+8      	; 0x14e <populate_buttons+0x74>
	keys[5] = 1;
 146:	21 e0       	ldi	r18, 0x01	; 1
 148:	20 93 2c 02 	sts	0x022C, r18
 14c:	02 c0       	rjmp	.+4      	; 0x152 <populate_buttons+0x78>
	else
	keys[5] = 0;
 14e:	10 92 2c 02 	sts	0x022C, r1
	
	if(data & (1<<7))
 152:	87 ff       	sbrs	r24, 7
 154:	04 c0       	rjmp	.+8      	; 0x15e <populate_buttons+0x84>
	keys[4] = 1;
 156:	21 e0       	ldi	r18, 0x01	; 1
 158:	20 93 2b 02 	sts	0x022B, r18
 15c:	02 c0       	rjmp	.+4      	; 0x162 <populate_buttons+0x88>
	else
	keys[4] = 0;
 15e:	10 92 2b 02 	sts	0x022B, r1
	
	if(data & (1<<8))
 162:	90 ff       	sbrs	r25, 0
 164:	04 c0       	rjmp	.+8      	; 0x16e <populate_buttons+0x94>
	keys[3] = 1;
 166:	21 e0       	ldi	r18, 0x01	; 1
 168:	20 93 2a 02 	sts	0x022A, r18
 16c:	02 c0       	rjmp	.+4      	; 0x172 <populate_buttons+0x98>
	else
	keys[3] = 0;
 16e:	10 92 2a 02 	sts	0x022A, r1
	
	if(data & (1<<9))
 172:	91 ff       	sbrs	r25, 1
 174:	04 c0       	rjmp	.+8      	; 0x17e <populate_buttons+0xa4>
	keys[2] = 1;
 176:	21 e0       	ldi	r18, 0x01	; 1
 178:	20 93 29 02 	sts	0x0229, r18
 17c:	02 c0       	rjmp	.+4      	; 0x182 <populate_buttons+0xa8>
	else
	keys[2] = 0;
 17e:	10 92 29 02 	sts	0x0229, r1
	
	if(data & (1<<10))
 182:	92 ff       	sbrs	r25, 2
 184:	04 c0       	rjmp	.+8      	; 0x18e <populate_buttons+0xb4>
	keys[1] = 1;
 186:	21 e0       	ldi	r18, 0x01	; 1
 188:	20 93 28 02 	sts	0x0228, r18
 18c:	02 c0       	rjmp	.+4      	; 0x192 <populate_buttons+0xb8>
	else
	keys[1] = 0;
 18e:	10 92 28 02 	sts	0x0228, r1
	
	if(data & (1<<11))
 192:	93 ff       	sbrs	r25, 3
 194:	04 c0       	rjmp	.+8      	; 0x19e <populate_buttons+0xc4>
	keys[0] = 1;
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	80 93 27 02 	sts	0x0227, r24
 19c:	08 95       	ret
	else
	keys[0] = 0;
 19e:	10 92 27 02 	sts	0x0227, r1
 1a2:	08 95       	ret

000001a4 <__vector_13>:
	*/
	//PORTC = osc1[count];
}

ISR(TIMER1_COMPA_vect)
{	
 1a4:	1f 92       	push	r1
 1a6:	0f 92       	push	r0
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	0f 92       	push	r0
 1ac:	11 24       	eor	r1, r1
 1ae:	0b b6       	in	r0, 0x3b	; 59
 1b0:	0f 92       	push	r0
 1b2:	0f 93       	push	r16
 1b4:	1f 93       	push	r17
 1b6:	2f 93       	push	r18
 1b8:	3f 93       	push	r19
 1ba:	4f 93       	push	r20
 1bc:	5f 93       	push	r21
 1be:	6f 93       	push	r22
 1c0:	7f 93       	push	r23
 1c2:	8f 93       	push	r24
 1c4:	9f 93       	push	r25
 1c6:	af 93       	push	r26
 1c8:	bf 93       	push	r27
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	ef 93       	push	r30
 1d0:	ff 93       	push	r31
	for (uint8_t i=0;i<12;i++)
	{
		//out[i] = 0;
		if(keys[i])
		out[i] = osc1[freq_counter[i]>>8];
 1d2:	60 91 35 02 	lds	r22, 0x0235
 1d6:	70 91 36 02 	lds	r23, 0x0236
 1da:	e7 e2       	ldi	r30, 0x27	; 39
 1dc:	f2 e0       	ldi	r31, 0x02	; 2
 1de:	cf e0       	ldi	r28, 0x0F	; 15
 1e0:	d2 e0       	ldi	r29, 0x02	; 2
 1e2:	03 e0       	ldi	r16, 0x03	; 3
 1e4:	12 e0       	ldi	r17, 0x02	; 2
 1e6:	23 e3       	ldi	r18, 0x33	; 51
 1e8:	32 e0       	ldi	r19, 0x02	; 2
ISR(TIMER1_COMPA_vect)
{	
	for (uint8_t i=0;i<12;i++)
	{
		//out[i] = 0;
		if(keys[i])
 1ea:	41 91       	ld	r20, Z+
 1ec:	44 23       	and	r20, r20
 1ee:	49 f0       	breq	.+18     	; 0x202 <__vector_13+0x5e>
		out[i] = osc1[freq_counter[i]>>8];
 1f0:	89 81       	ldd	r24, Y+1	; 0x01
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	ab 01       	movw	r20, r22
 1f6:	48 0f       	add	r20, r24
 1f8:	59 1f       	adc	r21, r25
 1fa:	da 01       	movw	r26, r20
 1fc:	4c 91       	ld	r20, X
 1fe:	d8 01       	movw	r26, r16
 200:	4c 93       	st	X, r20
 202:	22 96       	adiw	r28, 0x02	; 2
 204:	0f 5f       	subi	r16, 0xFF	; 255
 206:	1f 4f       	sbci	r17, 0xFF	; 255
	//PORTC = osc1[count];
}

ISR(TIMER1_COMPA_vect)
{	
	for (uint8_t i=0;i<12;i++)
 208:	e2 17       	cp	r30, r18
 20a:	f3 07       	cpc	r31, r19
 20c:	71 f7       	brne	.-36     	; 0x1ea <__vector_13+0x46>
	
	//l74hc165_shiftin(&data);
	//shiftin();
	//data = 100;
	//populate_buttons();
	PORTC = (out[0] + out[2] + out[4])>>2;
 20e:	20 91 03 02 	lds	r18, 0x0203
 212:	80 91 05 02 	lds	r24, 0x0205
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	82 0f       	add	r24, r18
 21a:	91 1d       	adc	r25, r1
 21c:	20 91 07 02 	lds	r18, 0x0207
 220:	82 0f       	add	r24, r18
 222:	91 1d       	adc	r25, r1
 224:	95 95       	asr	r25
 226:	87 95       	ror	r24
 228:	95 95       	asr	r25
 22a:	87 95       	ror	r24
 22c:	88 b9       	out	0x08, r24	; 8
}
 22e:	ff 91       	pop	r31
 230:	ef 91       	pop	r30
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	bf 91       	pop	r27
 238:	af 91       	pop	r26
 23a:	9f 91       	pop	r25
 23c:	8f 91       	pop	r24
 23e:	7f 91       	pop	r23
 240:	6f 91       	pop	r22
 242:	5f 91       	pop	r21
 244:	4f 91       	pop	r20
 246:	3f 91       	pop	r19
 248:	2f 91       	pop	r18
 24a:	1f 91       	pop	r17
 24c:	0f 91       	pop	r16
 24e:	0f 90       	pop	r0
 250:	0b be       	out	0x3b, r0	; 59
 252:	0f 90       	pop	r0
 254:	0f be       	out	0x3f, r0	; 63
 256:	0f 90       	pop	r0
 258:	1f 90       	pop	r1
 25a:	18 95       	reti

0000025c <shiftin>:
void shiftin()
{
	static uint8_t i = 0;
	static uint16_t dat = 0;
	//parallel load to freeze the state of the data lines
	if(i==0)
 25c:	20 91 02 02 	lds	r18, 0x0202
 260:	21 11       	cpse	r18, r1
 262:	05 c0       	rjmp	.+10     	; 0x26e <shiftin+0x12>
	{
		L74HC165_PORT &= ~(1 << L74HC165_LOADPIN);
 264:	28 98       	cbi	0x05, 0	; 5
		asm("nop");
 266:	00 00       	nop
		asm("nop");
 268:	00 00       	nop
		asm("nop");
 26a:	00 00       	nop
		//_delay_us(50);
		L74HC165_PORT |= (1 << L74HC165_LOADPIN);
 26c:	28 9a       	sbi	0x05, 0	; 5
	}
	
	dat |= ((L74HC165_PIN & (1 << L74HC165_DATAPIN))>>L74HC165_DATAPIN)<<(15-i);
 26e:	23 b1       	in	r18, 0x03	; 3
 270:	26 fb       	bst	r18, 6
 272:	88 27       	eor	r24, r24
 274:	80 f9       	bld	r24, 0
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	40 91 02 02 	lds	r20, 0x0202
 27c:	2f e0       	ldi	r18, 0x0F	; 15
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	24 1b       	sub	r18, r20
 282:	31 09       	sbc	r19, r1
 284:	02 c0       	rjmp	.+4      	; 0x28a <shiftin+0x2e>
 286:	88 0f       	add	r24, r24
 288:	99 1f       	adc	r25, r25
 28a:	2a 95       	dec	r18
 28c:	e2 f7       	brpl	.-8      	; 0x286 <shiftin+0x2a>
 28e:	20 91 00 02 	lds	r18, 0x0200
 292:	30 91 01 02 	lds	r19, 0x0201
 296:	82 2b       	or	r24, r18
 298:	93 2b       	or	r25, r19
 29a:	90 93 01 02 	sts	0x0201, r25
 29e:	80 93 00 02 	sts	0x0200, r24
	//get next
	L74HC165_PORT |= (1 << L74HC165_CLOCKPIN);
 2a2:	2c 9a       	sbi	0x05, 4	; 5
	//_delay_us(5);
	asm("nop");
 2a4:	00 00       	nop
	asm("nop");
 2a6:	00 00       	nop
	L74HC165_PORT &= ~(1 << L74HC165_CLOCKPIN);
 2a8:	2c 98       	cbi	0x05, 4	; 5
	i++;
 2aa:	80 91 02 02 	lds	r24, 0x0202
 2ae:	8f 5f       	subi	r24, 0xFF	; 255
	
	//reset i
	if(i > 15)
 2b0:	80 31       	cpi	r24, 0x10	; 16
 2b2:	18 f4       	brcc	.+6      	; 0x2ba <shiftin+0x5e>
	L74HC165_PORT |= (1 << L74HC165_CLOCKPIN);
	//_delay_us(5);
	asm("nop");
	asm("nop");
	L74HC165_PORT &= ~(1 << L74HC165_CLOCKPIN);
	i++;
 2b4:	80 93 02 02 	sts	0x0202, r24
 2b8:	08 95       	ret
	
	//reset i
	if(i > 15)
	{
		i = 0;
 2ba:	10 92 02 02 	sts	0x0202, r1
		//copy 2 bytes of data
		memcpy(&data, &dat, 2);
 2be:	80 91 00 02 	lds	r24, 0x0200
 2c2:	90 91 01 02 	lds	r25, 0x0201
 2c6:	90 93 34 02 	sts	0x0234, r25
 2ca:	80 93 33 02 	sts	0x0233, r24
		dat = 0;
 2ce:	10 92 01 02 	sts	0x0201, r1
 2d2:	10 92 00 02 	sts	0x0200, r1
 2d6:	08 95       	ret

000002d8 <__vector_9>:
	//ADCSRA |= (1<<ADSC);
}
*/

ISR(TIMER2_COMPA_vect)
{
 2d8:	1f 92       	push	r1
 2da:	0f 92       	push	r0
 2dc:	0f b6       	in	r0, 0x3f	; 63
 2de:	0f 92       	push	r0
 2e0:	11 24       	eor	r1, r1
 2e2:	0b b6       	in	r0, 0x3b	; 59
 2e4:	0f 92       	push	r0
 2e6:	2f 93       	push	r18
 2e8:	3f 93       	push	r19
 2ea:	4f 93       	push	r20
 2ec:	5f 93       	push	r21
 2ee:	6f 93       	push	r22
 2f0:	7f 93       	push	r23
 2f2:	8f 93       	push	r24
 2f4:	9f 93       	push	r25
 2f6:	af 93       	push	r26
 2f8:	bf 93       	push	r27
 2fa:	ef 93       	push	r30
 2fc:	ff 93       	push	r31
	shiftin();
 2fe:	0e 94 2e 01 	call	0x25c	; 0x25c <shiftin>
	populate_buttons();
 302:	0e 94 6d 00 	call	0xda	; 0xda <populate_buttons>
		release_value--;
		
	}
	*/
	//PORTC = osc1[count];
}
 306:	ff 91       	pop	r31
 308:	ef 91       	pop	r30
 30a:	bf 91       	pop	r27
 30c:	af 91       	pop	r26
 30e:	9f 91       	pop	r25
 310:	8f 91       	pop	r24
 312:	7f 91       	pop	r23
 314:	6f 91       	pop	r22
 316:	5f 91       	pop	r21
 318:	4f 91       	pop	r20
 31a:	3f 91       	pop	r19
 31c:	2f 91       	pop	r18
 31e:	0f 90       	pop	r0
 320:	0b be       	out	0x3b, r0	; 59
 322:	0f 90       	pop	r0
 324:	0f be       	out	0x3f, r0	; 63
 326:	0f 90       	pop	r0
 328:	1f 90       	pop	r1
 32a:	18 95       	reti

0000032c <__vector_16>:



//ISR(TIMER0_OVF_vect)
ISR(TIMER0_COMPA_vect)
{
 32c:	1f 92       	push	r1
 32e:	0f 92       	push	r0
 330:	0f b6       	in	r0, 0x3f	; 63
 332:	0f 92       	push	r0
 334:	11 24       	eor	r1, r1
 336:	0b b6       	in	r0, 0x3b	; 59
 338:	0f 92       	push	r0
 33a:	8f 93       	push	r24
 33c:	9f 93       	push	r25
 33e:	ef 93       	push	r30
 340:	ff 93       	push	r31
	//uint8_t out3 = sawtooth[freq3_counter>>8]>>3;
	//PORTC = out1+out2;
	//PORTC = out[0] + out[1] + out[2] + out[3] + out[4] + out[5] + out[6] + out[7] + out[8] + out[9] + out[10] + out[11];
	//PORTC = out[0] + out[2] + out[4];
	//freq1_counter += freq1;
	freq_counter[0] += 439*2; // 200 Hz
 342:	ef e0       	ldi	r30, 0x0F	; 15
 344:	f2 e0       	ldi	r31, 0x02	; 2
 346:	80 81       	ld	r24, Z
 348:	91 81       	ldd	r25, Z+1	; 0x01
 34a:	82 59       	subi	r24, 0x92	; 146
 34c:	9c 4f       	sbci	r25, 0xFC	; 252
 34e:	91 83       	std	Z+1, r25	; 0x01
 350:	80 83       	st	Z, r24
	//freq_counter[1] += 465; // 240 Hz
	freq_counter[2] += 493*2; //etc
 352:	e3 e1       	ldi	r30, 0x13	; 19
 354:	f2 e0       	ldi	r31, 0x02	; 2
 356:	80 81       	ld	r24, Z
 358:	91 81       	ldd	r25, Z+1	; 0x01
 35a:	86 52       	subi	r24, 0x26	; 38
 35c:	9c 4f       	sbci	r25, 0xFC	; 252
 35e:	91 83       	std	Z+1, r25	; 0x01
 360:	80 83       	st	Z, r24
	
	//freq_counter[3] += 522; 
	freq_counter[4] += 553*2;
 362:	e7 e1       	ldi	r30, 0x17	; 23
 364:	f2 e0       	ldi	r31, 0x02	; 2
 366:	80 81       	ld	r24, Z
 368:	91 81       	ldd	r25, Z+1	; 0x01
 36a:	8e 5a       	subi	r24, 0xAE	; 174
 36c:	9b 4f       	sbci	r25, 0xFB	; 251
 36e:	91 83       	std	Z+1, r25	; 0x01
 370:	80 83       	st	Z, r24
	{
		out[3] = sawtooth[freq_counter[3]>>8]>>2;
	}else
		out[3] = 0;
		*/
}
 372:	ff 91       	pop	r31
 374:	ef 91       	pop	r30
 376:	9f 91       	pop	r25
 378:	8f 91       	pop	r24
 37a:	0f 90       	pop	r0
 37c:	0b be       	out	0x3b, r0	; 59
 37e:	0f 90       	pop	r0
 380:	0f be       	out	0x3f, r0	; 63
 382:	0f 90       	pop	r0
 384:	1f 90       	pop	r1
 386:	18 95       	reti

00000388 <setup_timer1>:

void setup_timer1()
{
	TCCR1A = 0;
 388:	a0 e8       	ldi	r26, 0x80	; 128
 38a:	b0 e0       	ldi	r27, 0x00	; 0
 38c:	1c 92       	st	X, r1
	TCCR1B = 0;
 38e:	e1 e8       	ldi	r30, 0x81	; 129
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	10 82       	st	Z, r1
	TCCR1C = 0;
 394:	10 92 82 00 	sts	0x0082, r1
	TCNT1 = 0;
 398:	10 92 85 00 	sts	0x0085, r1
 39c:	10 92 84 00 	sts	0x0084, r1
	
	//TCCR1A |= (1<<COM1A1) | (1<<COM1A0) | (1<<WGM11);
	TCCR1A |= (1<<WGM11);
 3a0:	8c 91       	ld	r24, X
 3a2:	82 60       	ori	r24, 0x02	; 2
 3a4:	8c 93       	st	X, r24
	//TCCR1B |= (1<<WGM13) | (1<<WGM12) | (1<<CS10);
	//prescaler = 8
	TCCR1B |= (1<<WGM13) | (1<<WGM12) | (1<<CS11);
 3a6:	80 81       	ld	r24, Z
 3a8:	8a 61       	ori	r24, 0x1A	; 26
 3aa:	80 83       	st	Z, r24
	
	//OCR1A = 0xC000;	//set
	//OCR1A = 0xA000;
	//OCR1A = 100;
	//ICR1 = 0xF000;	//clear
	ICR1 = 100;	//clear
 3ac:	84 e6       	ldi	r24, 0x64	; 100
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	90 93 87 00 	sts	0x0087, r25
 3b4:	80 93 86 00 	sts	0x0086, r24
	OCR1A = 50;
 3b8:	82 e3       	ldi	r24, 0x32	; 50
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	90 93 89 00 	sts	0x0089, r25
 3c0:	80 93 88 00 	sts	0x0088, r24
	
	TIMSK1 =(1<<OCIE1A);
 3c4:	82 e0       	ldi	r24, 0x02	; 2
 3c6:	80 93 6f 00 	sts	0x006F, r24
 3ca:	08 95       	ret

000003cc <setup_timer2>:
	//TIFR1 &= ~(1<<OCF1A);
}

void setup_timer2()
{
	TCCR2A = 0;
 3cc:	a0 eb       	ldi	r26, 0xB0	; 176
 3ce:	b0 e0       	ldi	r27, 0x00	; 0
 3d0:	1c 92       	st	X, r1
	TCCR2B = 0;
 3d2:	e1 eb       	ldi	r30, 0xB1	; 177
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	10 82       	st	Z, r1
	TCNT2 = 0;
 3d8:	10 92 b2 00 	sts	0x00B2, r1
	//OCR2A = 5;
	OCR2A = 5000;
 3dc:	88 e8       	ldi	r24, 0x88	; 136
 3de:	80 93 b3 00 	sts	0x00B3, r24
	
	TCCR2A |= (1<<WGM21) | (1<<WGM20);
 3e2:	8c 91       	ld	r24, X
 3e4:	83 60       	ori	r24, 0x03	; 3
 3e6:	8c 93       	st	X, r24
	// Prescaler = FCPU/1024
	TCCR2B |= (1<<CS20) | (1<<CS22) | (1<<WGM22);
 3e8:	80 81       	ld	r24, Z
 3ea:	8d 60       	ori	r24, 0x0D	; 13
 3ec:	80 83       	st	Z, r24
	
	TIMSK2 = (1<<OCIE2A);
 3ee:	82 e0       	ldi	r24, 0x02	; 2
 3f0:	80 93 70 00 	sts	0x0070, r24
 3f4:	08 95       	ret

000003f6 <setup_timer0>:
}

//f = 20000000/512 = 39062.5 Hz
void setup_timer0()
{
	TCCR0A = 0;
 3f6:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
 3f8:	15 bc       	out	0x25, r1	; 37
	TCNT0 = 0;
 3fa:	16 bc       	out	0x26, r1	; 38
	//OCR0A = 200;
	OCR0A = 64;
 3fc:	80 e4       	ldi	r24, 0x40	; 64
 3fe:	87 bd       	out	0x27, r24	; 39
	//OCR0A = 8;
	
	TCCR0A |= (1<<WGM01) | (1<<WGM00);
 400:	84 b5       	in	r24, 0x24	; 36
 402:	83 60       	ori	r24, 0x03	; 3
 404:	84 bd       	out	0x24, r24	; 36
	//prescaler = x
	//TCCR0B |= (1<<CS00) | (1<<CS01) | (1<<WGM02);
	//prescaler FCPU/1024
	//TCCR0B |= (1<<CS00) | (1<<CS02) | (1<<WGM02);
	//prescaler FCPU/8
	TCCR0B |= (1<<CS01) | (1<<WGM02);
 406:	85 b5       	in	r24, 0x25	; 37
 408:	8a 60       	ori	r24, 0x0A	; 10
 40a:	85 bd       	out	0x25, r24	; 37
	
	//TCCR0B |= (1<<FOC0B);
	
	//Enable Overflow Interrupt Enable
	//TIMSK0 |=(1<<TOIE0);
	TIMSK0 = (1<<OCIE0A);
 40c:	82 e0       	ldi	r24, 0x02	; 2
 40e:	80 93 6e 00 	sts	0x006E, r24
 412:	08 95       	ret

00000414 <main>:
	ADMUX |= (1<<ADLAR) | (1<<REFS0);
}

int main(void)
{
	sei();
 414:	78 94       	sei
	l74hc165_init();
 416:	0e 94 67 00 	call	0xce	; 0xce <l74hc165_init>
	//osc1 = pseudosquare;
	
	osc1 = square_;
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	91 e0       	ldi	r25, 0x01	; 1
 41e:	90 93 36 02 	sts	0x0236, r25
 422:	80 93 35 02 	sts	0x0235, r24
	//0.025
	//lowpass(osc1, square2x, 0b01110111, 0b00000101);
	
	//osc1 = prutt;
	//int n;
	DDRC = 0xff;
 426:	8f ef       	ldi	r24, 0xFF	; 255
 428:	87 b9       	out	0x07, r24	; 7
	{
		int8_t t = (sine[3*i]-0x80)>>3;
		LCD_set_pixel(i-1,0+osc1[3*i]>>3);
	}
	*/
	setup_timer1();
 42a:	0e 94 c4 01 	call	0x388	; 0x388 <setup_timer1>
	setup_timer0();
 42e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <setup_timer0>
	setup_timer2();
 432:	0e 94 e6 01 	call	0x3cc	; 0x3cc <setup_timer2>
 436:	ff cf       	rjmp	.-2      	; 0x436 <main+0x22>

00000438 <_exit>:
 438:	f8 94       	cli

0000043a <__stop_program>:
 43a:	ff cf       	rjmp	.-2      	; 0x43a <__stop_program>
