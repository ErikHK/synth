
outputtest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000102  00800100  00000658  000006ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000658  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000337  00800202  00800202  000007ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007ee  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000108  00000000  00000000  0000081e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e0d  00000000  00000000  00000926  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000425  00000000  00000000  00001733  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005a1  00000000  00000000  00001b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000330  00000000  00000000  000020fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f5  00000000  00000000  0000242c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b00  00000000  00000000  00002821  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000100  00000000  00000000  00003321  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__vector_9>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__vector_13>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__vector_16>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 34 01 	jmp	0x268	; 0x268 <__vector_24>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	12 e0       	ldi	r17, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e5       	ldi	r30, 0x58	; 88
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	25 e0       	ldi	r18, 0x05	; 5
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b2 e0       	ldi	r27, 0x02	; 2
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 33       	cpi	r26, 0x39	; 57
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 ff 02 	call	0x5fe	; 0x5fe <main>
  c6:	0c 94 2a 03 	jmp	0x654	; 0x654 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <l74hc165_init>:
/*
 * init the shift register
 */
void l74hc165_init() {
	//output
	L74HC165_DDR |= (1 << L74HC165_CLOCKPIN);
  ce:	24 9a       	sbi	0x04, 4	; 4
	L74HC165_DDR |= (1 << L74HC165_LOADPIN);
  d0:	20 9a       	sbi	0x04, 0	; 4
	//input
	L74HC165_DDR &= ~(1 << L74HC165_DATAPIN);
  d2:	26 98       	cbi	0x04, 6	; 4
	//low
	L74HC165_PORT &= ~(1 << L74HC165_CLOCKPIN);
  d4:	2c 98       	cbi	0x05, 4	; 5
	L74HC165_PORT &= ~(1 << L74HC165_LOADPIN);
  d6:	28 98       	cbi	0x05, 0	; 5
  d8:	08 95       	ret

000000da <l74hc165_shiftin>:
}

/*
 * shift in data
 */
void l74hc165_shiftin(uint8_t *bytearray) {
  da:	cf 93       	push	r28
	//parallel load to freeze the state of the data lines
	L74HC165_PORT &= ~(1 << L74HC165_LOADPIN);
  dc:	28 98       	cbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	40 e1       	ldi	r20, 0x10	; 16
  e0:	4a 95       	dec	r20
  e2:	f1 f7       	brne	.-4      	; 0xe0 <l74hc165_shiftin+0x6>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <l74hc165_shiftin+0xc>
	_delay_us(50);
	L74HC165_PORT |= (1 << L74HC165_LOADPIN);
  e6:	28 9a       	sbi	0x05, 0	; 5
  e8:	e8 2f       	mov	r30, r24
  ea:	f9 2f       	mov	r31, r25
  ec:	72 e0       	ldi	r23, 0x02	; 2
}

/*
 * shift in data
 */
void l74hc165_shiftin(uint8_t *bytearray) {
  ee:	c7 e0       	ldi	r28, 0x07	; 7
  f0:	b0 e0       	ldi	r27, 0x00	; 0
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	17 c0       	rjmp	.+46     	; 0x124 <l74hc165_shiftin+0x4a>
	L74HC165_PORT |= (1 << L74HC165_LOADPIN);
	for(uint8_t i = 0; i < L74HC165_ICNUMBER; i++){
		//iterate through the bits in each registers
		uint8_t currentbyte = 0;
		for(uint8_t j = 0; j < 8; j++){
			currentbyte |= ((L74HC165_PIN & (1 << L74HC165_DATAPIN))>>L74HC165_DATAPIN)<<(7-j);
  f6:	43 b1       	in	r20, 0x03	; 3
  f8:	46 fb       	bst	r20, 6
  fa:	22 27       	eor	r18, r18
  fc:	20 f9       	bld	r18, 0
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	a9 01       	movw	r20, r18
 102:	08 2e       	mov	r0, r24
 104:	02 c0       	rjmp	.+4      	; 0x10a <l74hc165_shiftin+0x30>
 106:	44 0f       	add	r20, r20
 108:	55 1f       	adc	r21, r21
 10a:	0a 94       	dec	r0
 10c:	e2 f7       	brpl	.-8      	; 0x106 <l74hc165_shiftin+0x2c>
 10e:	64 2b       	or	r22, r20
	        //get next
			L74HC165_PORT |= (1 << L74HC165_CLOCKPIN);
 110:	2c 9a       	sbi	0x05, 4	; 5
 112:	00 c0       	rjmp	.+0      	; 0x114 <l74hc165_shiftin+0x3a>
 114:	00 c0       	rjmp	.+0      	; 0x116 <l74hc165_shiftin+0x3c>
 116:	00 00       	nop
	        _delay_us(5);
	        L74HC165_PORT &= ~(1 << L74HC165_CLOCKPIN);
 118:	2c 98       	cbi	0x05, 4	; 5
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	60 f7       	brcc	.-40     	; 0xf6 <l74hc165_shiftin+0x1c>
		}
		memcpy(&bytearray[i], &currentbyte, 1);
 11e:	61 93       	st	Z+, r22
 120:	71 50       	subi	r23, 0x01	; 1
void l74hc165_shiftin(uint8_t *bytearray) {
	//parallel load to freeze the state of the data lines
	L74HC165_PORT &= ~(1 << L74HC165_LOADPIN);
	_delay_us(50);
	L74HC165_PORT |= (1 << L74HC165_LOADPIN);
	for(uint8_t i = 0; i < L74HC165_ICNUMBER; i++){
 122:	21 f0       	breq	.+8      	; 0x12c <l74hc165_shiftin+0x52>
}

/*
 * shift in data
 */
void l74hc165_shiftin(uint8_t *bytearray) {
 124:	8c 2f       	mov	r24, r28
 126:	9b 2f       	mov	r25, r27
 128:	6a 2f       	mov	r22, r26
 12a:	e5 cf       	rjmp	.-54     	; 0xf6 <l74hc165_shiftin+0x1c>
	        _delay_us(5);
	        L74HC165_PORT &= ~(1 << L74HC165_CLOCKPIN);
		}
		memcpy(&bytearray[i], &currentbyte, 1);
	}
}
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <fmul>:



uint8_t fmul(uint8_t frac, uint8_t x)
{
	cli();
 130:	f8 94       	cli
	uint8_t * result =  0x01; //points to r1 where the value is stored
	uint8_t * ptr = 23;			//point to R23
	*ptr = frac;				//load frac into R23
 132:	80 93 17 00 	sts	0x0017, r24
	ptr = 22;
	*ptr = x;
 136:	60 93 16 00 	sts	0x0016, r22
	asm("fmul r23,r22");
 13a:	7e 03       	fmul	r23, r22
	sei();
 13c:	78 94       	sei
	return (uint8_t)*result;
}
 13e:	80 91 01 00 	lds	r24, 0x0001
 142:	08 95       	ret

00000144 <debounce>:


void debounce(uint8_t key, uint8_t i)
{
	
	if(key)
 144:	88 23       	and	r24, r24
 146:	c9 f0       	breq	.+50     	; 0x17a <debounce+0x36>
	{
		pressed[i]++;
 148:	70 e0       	ldi	r23, 0x00	; 0
 14a:	fb 01       	movw	r30, r22
 14c:	e1 5f       	subi	r30, 0xF1	; 241
 14e:	fd 4f       	sbci	r31, 0xFD	; 253
 150:	80 81       	ld	r24, Z
 152:	8f 5f       	subi	r24, 0xFF	; 255
 154:	80 83       	st	Z, r24
		if(pressed[i] > 20)
 156:	85 31       	cpi	r24, 0x15	; 21
 158:	08 f1       	brcs	.+66     	; 0x19c <debounce+0x58>
		{
			if(deb_buttons[i] == 0)
 15a:	fb 01       	movw	r30, r22
 15c:	e2 5e       	subi	r30, 0xE2	; 226
 15e:	fd 4f       	sbci	r31, 0xFD	; 253
 160:	80 81       	ld	r24, Z
 162:	81 11       	cpse	r24, r1
 164:	05 c0       	rjmp	.+10     	; 0x170 <debounce+0x2c>
			{
				deb_buttons[i] = 1;
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	fb 01       	movw	r30, r22
 16a:	e2 5e       	subi	r30, 0xE2	; 226
 16c:	fd 4f       	sbci	r31, 0xFD	; 253
 16e:	80 83       	st	Z, r24
			}
			
			pressed[i] = 0;
 170:	fb 01       	movw	r30, r22
 172:	e1 5f       	subi	r30, 0xF1	; 241
 174:	fd 4f       	sbci	r31, 0xFD	; 253
 176:	10 82       	st	Z, r1
 178:	08 95       	ret
		}
		
	}
	else
	{
		released[i]++;
 17a:	70 e0       	ldi	r23, 0x00	; 0
 17c:	fb 01       	movw	r30, r22
 17e:	ed 5f       	subi	r30, 0xFD	; 253
 180:	fd 4f       	sbci	r31, 0xFD	; 253
 182:	80 81       	ld	r24, Z
 184:	8f 5f       	subi	r24, 0xFF	; 255
 186:	80 83       	st	Z, r24
		if(released[i] > 20)
 188:	85 31       	cpi	r24, 0x15	; 21
 18a:	40 f0       	brcs	.+16     	; 0x19c <debounce+0x58>
		{
			deb_buttons[i] = 0;	//set button to zero
 18c:	fb 01       	movw	r30, r22
 18e:	e2 5e       	subi	r30, 0xE2	; 226
 190:	fd 4f       	sbci	r31, 0xFD	; 253
 192:	10 82       	st	Z, r1
			released[i] = 0;		//reset confidence
 194:	fb 01       	movw	r30, r22
 196:	ed 5f       	subi	r30, 0xFD	; 253
 198:	fd 4f       	sbci	r31, 0xFD	; 253
 19a:	10 82       	st	Z, r1
 19c:	08 95       	ret

0000019e <populate_buttons>:
}


void populate_buttons()
{
	if((uint16_t)*data & 1) //4:th button
 19e:	80 91 29 04 	lds	r24, 0x0429
 1a2:	90 91 2a 04 	lds	r25, 0x042A
 1a6:	80 ff       	sbrs	r24, 0
 1a8:	04 c0       	rjmp	.+8      	; 0x1b2 <populate_buttons+0x14>
	  //buttons |= (1<<3);
	  buttons[3] = 1;
 1aa:	21 e0       	ldi	r18, 0x01	; 1
 1ac:	20 93 30 04 	sts	0x0430, r18
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <populate_buttons+0x18>
	else
	  buttons[3] = 0;
 1b2:	10 92 30 04 	sts	0x0430, r1
	
	if((uint16_t)*data & 2)
 1b6:	81 ff       	sbrs	r24, 1
 1b8:	04 c0       	rjmp	.+8      	; 0x1c2 <populate_buttons+0x24>
	  //buttons |= (1<<2);
	  buttons[2] = 1;
 1ba:	21 e0       	ldi	r18, 0x01	; 1
 1bc:	20 93 2f 04 	sts	0x042F, r18
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <populate_buttons+0x28>
	else
	  buttons[2] = 0;
 1c2:	10 92 2f 04 	sts	0x042F, r1
	
	if((uint16_t)*data & 4)
 1c6:	82 ff       	sbrs	r24, 2
 1c8:	04 c0       	rjmp	.+8      	; 0x1d2 <populate_buttons+0x34>
	  //buttons |= (1<<1);
	  buttons[1] = 1;
 1ca:	21 e0       	ldi	r18, 0x01	; 1
 1cc:	20 93 2e 04 	sts	0x042E, r18
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <populate_buttons+0x38>
	else
	  buttons[1] = 0;
 1d2:	10 92 2e 04 	sts	0x042E, r1
	
	if((uint16_t)*data & 8)
 1d6:	83 ff       	sbrs	r24, 3
 1d8:	04 c0       	rjmp	.+8      	; 0x1e2 <populate_buttons+0x44>
	  //buttons |= (1<<0);
	  buttons[0] = 1;
 1da:	21 e0       	ldi	r18, 0x01	; 1
 1dc:	20 93 2d 04 	sts	0x042D, r18
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <populate_buttons+0x48>
	else
	  buttons[0] = 0;
 1e2:	10 92 2d 04 	sts	0x042D, r1
	  
	if((uint16_t)*data & 256)
 1e6:	90 ff       	sbrs	r25, 0
 1e8:	04 c0       	rjmp	.+8      	; 0x1f2 <populate_buttons+0x54>
	  //buttons |= (1<<11);
	  buttons[11] = 1;
 1ea:	21 e0       	ldi	r18, 0x01	; 1
 1ec:	20 93 38 04 	sts	0x0438, r18
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <populate_buttons+0x58>
	else
	  buttons[11] = 0;
 1f2:	10 92 38 04 	sts	0x0438, r1
	  
	if((uint16_t)*data & 512)
 1f6:	91 ff       	sbrs	r25, 1
 1f8:	04 c0       	rjmp	.+8      	; 0x202 <populate_buttons+0x64>
	  //buttons |= (1<<10);
	  buttons[10] = 1;
 1fa:	21 e0       	ldi	r18, 0x01	; 1
 1fc:	20 93 37 04 	sts	0x0437, r18
 200:	02 c0       	rjmp	.+4      	; 0x206 <populate_buttons+0x68>
	else
	  buttons[10] = 0;
 202:	10 92 37 04 	sts	0x0437, r1
	  
	if((uint16_t)*data & 1024)
 206:	92 ff       	sbrs	r25, 2
 208:	04 c0       	rjmp	.+8      	; 0x212 <populate_buttons+0x74>
	  //buttons |= (1<<9);
	  buttons[9] = 1;
 20a:	21 e0       	ldi	r18, 0x01	; 1
 20c:	20 93 36 04 	sts	0x0436, r18
 210:	02 c0       	rjmp	.+4      	; 0x216 <populate_buttons+0x78>
	else
	  buttons[9] = 0;
 212:	10 92 36 04 	sts	0x0436, r1
	
	if((uint16_t)*data & 2048)
 216:	93 ff       	sbrs	r25, 3
 218:	04 c0       	rjmp	.+8      	; 0x222 <populate_buttons+0x84>
	  //buttons |= (1<<8);
	  buttons[8] = 1;
 21a:	21 e0       	ldi	r18, 0x01	; 1
 21c:	20 93 35 04 	sts	0x0435, r18
 220:	02 c0       	rjmp	.+4      	; 0x226 <populate_buttons+0x88>
	else
	  buttons[8] = 0;
 222:	10 92 35 04 	sts	0x0435, r1
	  
	if((uint16_t)*data & 4096)
 226:	94 ff       	sbrs	r25, 4
 228:	04 c0       	rjmp	.+8      	; 0x232 <populate_buttons+0x94>
	  //buttons |= (1<<7);
	  buttons[7] = 1;
 22a:	21 e0       	ldi	r18, 0x01	; 1
 22c:	20 93 34 04 	sts	0x0434, r18
 230:	02 c0       	rjmp	.+4      	; 0x236 <populate_buttons+0x98>
	else
	  buttons[7] = 0;
 232:	10 92 34 04 	sts	0x0434, r1
	
	if((uint16_t)*data & 8192)
 236:	95 ff       	sbrs	r25, 5
 238:	04 c0       	rjmp	.+8      	; 0x242 <populate_buttons+0xa4>
	  //buttons |= (1<<6);
	  buttons[6] = 1;
 23a:	21 e0       	ldi	r18, 0x01	; 1
 23c:	20 93 33 04 	sts	0x0433, r18
 240:	02 c0       	rjmp	.+4      	; 0x246 <populate_buttons+0xa8>
	else
	  buttons[6] = 0;
 242:	10 92 33 04 	sts	0x0433, r1
	
	if((uint16_t)*data & 16384)
 246:	96 ff       	sbrs	r25, 6
 248:	04 c0       	rjmp	.+8      	; 0x252 <populate_buttons+0xb4>
	  //buttons |= (1<<5);
	  buttons[5] = 1;
 24a:	21 e0       	ldi	r18, 0x01	; 1
 24c:	20 93 32 04 	sts	0x0432, r18
 250:	02 c0       	rjmp	.+4      	; 0x256 <populate_buttons+0xb8>
	else
	  buttons[5] = 0;
 252:	10 92 32 04 	sts	0x0432, r1
	  
	if((uint16_t)*data & 32768) //5:th button
 256:	99 23       	and	r25, r25
 258:	24 f4       	brge	.+8      	; 0x262 <populate_buttons+0xc4>
	  //buttons |= (1<<4);
	  buttons[4] = 1;
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	80 93 31 04 	sts	0x0431, r24
 260:	08 95       	ret
	else
	  buttons[4] = 0;
 262:	10 92 31 04 	sts	0x0431, r1
 266:	08 95       	ret

00000268 <__vector_24>:
	
}
*/

ISR(ADC_vect)
{
 268:	1f 92       	push	r1
 26a:	0f 92       	push	r0
 26c:	0f b6       	in	r0, 0x3f	; 63
 26e:	0f 92       	push	r0
 270:	11 24       	eor	r1, r1
 272:	0b b6       	in	r0, 0x3b	; 59
 274:	0f 92       	push	r0
 276:	8f 93       	push	r24
 278:	ef 93       	push	r30
 27a:	ff 93       	push	r31
	
	//char adc_res[4];
	pot_data = ADCH;
 27c:	80 91 79 00 	lds	r24, 0x0079
 280:	80 93 24 04 	sts	0x0424, r24
	//itoa(pot_data, adc_res, 10);
	//LCD_write_string(5,5,&adc_res);
	
	ADCSRA |= (1<<ADSC);
 284:	ea e7       	ldi	r30, 0x7A	; 122
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	80 81       	ld	r24, Z
 28a:	80 64       	ori	r24, 0x40	; 64
 28c:	80 83       	st	Z, r24
}
 28e:	ff 91       	pop	r31
 290:	ef 91       	pop	r30
 292:	8f 91       	pop	r24
 294:	0f 90       	pop	r0
 296:	0b be       	out	0x3b, r0	; 59
 298:	0f 90       	pop	r0
 29a:	0f be       	out	0x3f, r0	; 63
 29c:	0f 90       	pop	r0
 29e:	1f 90       	pop	r1
 2a0:	18 95       	reti

000002a2 <__vector_9>:


ISR(TIMER2_COMPA_vect)
{
 2a2:	1f 92       	push	r1
 2a4:	0f 92       	push	r0
 2a6:	0f b6       	in	r0, 0x3f	; 63
 2a8:	0f 92       	push	r0
 2aa:	11 24       	eor	r1, r1
 2ac:	8f 93       	push	r24
	//button is pressed
	if(deb_buttons[2])
 2ae:	80 91 20 02 	lds	r24, 0x0220
 2b2:	88 23       	and	r24, r24
 2b4:	81 f0       	breq	.+32     	; 0x2d6 <__vector_9+0x34>
	{
		//increase attack!
		if(attack_value < 254-25)
 2b6:	80 91 02 02 	lds	r24, 0x0202
 2ba:	85 3e       	cpi	r24, 0xE5	; 229
 2bc:	18 f4       	brcc	.+6      	; 0x2c4 <__vector_9+0x22>
		  attack_value+=1;
 2be:	8f 5f       	subi	r24, 0xFF	; 255
 2c0:	80 93 02 02 	sts	0x0202, r24
		  
		//reset release_value
		release_value = attack_value;
 2c4:	80 91 02 02 	lds	r24, 0x0202
 2c8:	80 93 00 01 	sts	0x0100, r24
 2cc:	0a c0       	rjmp	.+20     	; 0x2e2 <__vector_9+0x40>
	//button is released
	if(!deb_buttons[2])
	{
		attack_value = 0;
		if(release_value > 0)
		release_value--;
 2ce:	81 50       	subi	r24, 0x01	; 1
 2d0:	80 93 00 01 	sts	0x0100, r24
 2d4:	06 c0       	rjmp	.+12     	; 0x2e2 <__vector_9+0x40>
	}
	
	//button is released
	if(!deb_buttons[2])
	{
		attack_value = 0;
 2d6:	10 92 02 02 	sts	0x0202, r1
		if(release_value > 0)
 2da:	80 91 00 01 	lds	r24, 0x0100
 2de:	81 11       	cpse	r24, r1
 2e0:	f6 cf       	rjmp	.-20     	; 0x2ce <__vector_9+0x2c>
		release_value--;
		
	}
	
	//PORTC = osc1[count];
}
 2e2:	8f 91       	pop	r24
 2e4:	0f 90       	pop	r0
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	0f 90       	pop	r0
 2ea:	1f 90       	pop	r1
 2ec:	18 95       	reti

000002ee <__vector_13>:

ISR(TIMER1_COMPA_vect)
{
 2ee:	1f 92       	push	r1
 2f0:	0f 92       	push	r0
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	0f 92       	push	r0
 2f6:	11 24       	eor	r1, r1
 2f8:	0b b6       	in	r0, 0x3b	; 59
 2fa:	0f 92       	push	r0
 2fc:	2f 93       	push	r18
 2fe:	3f 93       	push	r19
 300:	4f 93       	push	r20
 302:	5f 93       	push	r21
 304:	6f 93       	push	r22
 306:	7f 93       	push	r23
 308:	8f 93       	push	r24
 30a:	9f 93       	push	r25
 30c:	af 93       	push	r26
 30e:	bf 93       	push	r27
 310:	ef 93       	push	r30
 312:	ff 93       	push	r31
	//count += 1;
	populate_buttons();
 314:	0e 94 cf 00 	call	0x19e	; 0x19e <populate_buttons>
	LCD_Write(LCD_DATA, 0xab);
	LCD_Write(LCD_DATA, 0x10);
	LCD_Write(LCD_DATA, 0x14);
	LCD_Write(LCD_DATA, 0x03);
	*/
}
 318:	ff 91       	pop	r31
 31a:	ef 91       	pop	r30
 31c:	bf 91       	pop	r27
 31e:	af 91       	pop	r26
 320:	9f 91       	pop	r25
 322:	8f 91       	pop	r24
 324:	7f 91       	pop	r23
 326:	6f 91       	pop	r22
 328:	5f 91       	pop	r21
 32a:	4f 91       	pop	r20
 32c:	3f 91       	pop	r19
 32e:	2f 91       	pop	r18
 330:	0f 90       	pop	r0
 332:	0b be       	out	0x3b, r0	; 59
 334:	0f 90       	pop	r0
 336:	0f be       	out	0x3f, r0	; 63
 338:	0f 90       	pop	r0
 33a:	1f 90       	pop	r1
 33c:	18 95       	reti

0000033e <__vector_16>:


//ISR(TIMER0_OVF_vect)
ISR(TIMER0_COMPA_vect)
{
 33e:	1f 92       	push	r1
 340:	0f 92       	push	r0
 342:	0f b6       	in	r0, 0x3f	; 63
 344:	0f 92       	push	r0
 346:	11 24       	eor	r1, r1
 348:	0b b6       	in	r0, 0x3b	; 59
 34a:	0f 92       	push	r0
 34c:	2f 93       	push	r18
 34e:	3f 93       	push	r19
 350:	4f 93       	push	r20
 352:	5f 93       	push	r21
 354:	6f 93       	push	r22
 356:	7f 93       	push	r23
 358:	8f 93       	push	r24
 35a:	9f 93       	push	r25
 35c:	af 93       	push	r26
 35e:	bf 93       	push	r27
 360:	ef 93       	push	r30
 362:	ff 93       	push	r31
	count += 2;
 364:	90 91 1b 02 	lds	r25, 0x021B
 368:	9e 5f       	subi	r25, 0xFE	; 254
 36a:	90 93 1b 02 	sts	0x021B, r25
	//PORTC = osc1[count];
	
	
	
	//button is released
	if(!deb_buttons[2])
 36e:	80 91 20 02 	lds	r24, 0x0220
 372:	81 11       	cpse	r24, r1
 374:	11 c0       	rjmp	.+34     	; 0x398 <__vector_16+0x5a>
	{
		if(release_value > 2)
 376:	80 91 00 01 	lds	r24, 0x0100
 37a:	83 30       	cpi	r24, 0x03	; 3
 37c:	58 f0       	brcs	.+22     	; 0x394 <__vector_16+0x56>
			PORTC = fmul(release_value>>1, osc1[count]);
 37e:	e0 91 1c 02 	lds	r30, 0x021C
 382:	f0 91 1d 02 	lds	r31, 0x021D
 386:	e9 0f       	add	r30, r25
 388:	f1 1d       	adc	r31, r1
 38a:	60 81       	ld	r22, Z
 38c:	86 95       	lsr	r24
 38e:	0e 94 98 00 	call	0x130	; 0x130 <fmul>
 392:	88 b9       	out	0x08, r24	; 8
		OCR0A = note_vals[2];
 394:	86 ed       	ldi	r24, 0xD6	; 214
 396:	87 bd       	out	0x27, r24	; 39
	}
	
	if(deb_buttons[0])
 398:	80 91 1e 02 	lds	r24, 0x021E
 39c:	88 23       	and	r24, r24
 39e:	69 f0       	breq	.+26     	; 0x3ba <__vector_16+0x7c>
	{
		PORTC = osc1[count];
 3a0:	80 91 1b 02 	lds	r24, 0x021B
 3a4:	e0 91 1c 02 	lds	r30, 0x021C
 3a8:	f0 91 1d 02 	lds	r31, 0x021D
 3ac:	e8 0f       	add	r30, r24
 3ae:	f1 1d       	adc	r31, r1
 3b0:	80 81       	ld	r24, Z
 3b2:	88 b9       	out	0x08, r24	; 8
		OCR0A = note_vals[0];
 3b4:	80 ef       	ldi	r24, 0xF0	; 240
 3b6:	87 bd       	out	0x27, r24	; 39
 3b8:	c9 c0       	rjmp	.+402    	; 0x54c <__vector_16+0x20e>
	}
	
	else if(deb_buttons[1])
 3ba:	80 91 1f 02 	lds	r24, 0x021F
 3be:	88 23       	and	r24, r24
 3c0:	69 f0       	breq	.+26     	; 0x3dc <__vector_16+0x9e>
	{
		PORTC = osc1[count];
 3c2:	80 91 1b 02 	lds	r24, 0x021B
 3c6:	e0 91 1c 02 	lds	r30, 0x021C
 3ca:	f0 91 1d 02 	lds	r31, 0x021D
 3ce:	e8 0f       	add	r30, r24
 3d0:	f1 1d       	adc	r31, r1
 3d2:	80 81       	ld	r24, Z
 3d4:	88 b9       	out	0x08, r24	; 8
		OCR0A = note_vals[1];
 3d6:	82 ee       	ldi	r24, 0xE2	; 226
 3d8:	87 bd       	out	0x27, r24	; 39
 3da:	b8 c0       	rjmp	.+368    	; 0x54c <__vector_16+0x20e>
	}
	
	else if(deb_buttons[2])
 3dc:	80 91 20 02 	lds	r24, 0x0220
 3e0:	88 23       	and	r24, r24
 3e2:	91 f0       	breq	.+36     	; 0x408 <__vector_16+0xca>
	{
		PORTC = fmul(attack_value>>1, osc1[count]);
 3e4:	80 91 1b 02 	lds	r24, 0x021B
 3e8:	e0 91 1c 02 	lds	r30, 0x021C
 3ec:	f0 91 1d 02 	lds	r31, 0x021D
 3f0:	e8 0f       	add	r30, r24
 3f2:	f1 1d       	adc	r31, r1
 3f4:	80 91 02 02 	lds	r24, 0x0202
 3f8:	60 81       	ld	r22, Z
 3fa:	86 95       	lsr	r24
 3fc:	0e 94 98 00 	call	0x130	; 0x130 <fmul>
 400:	88 b9       	out	0x08, r24	; 8
		OCR0A = note_vals[2];
 402:	86 ed       	ldi	r24, 0xD6	; 214
 404:	87 bd       	out	0x27, r24	; 39
 406:	a2 c0       	rjmp	.+324    	; 0x54c <__vector_16+0x20e>
		OCR0A = note_vals[2];
		
	}
	*/
	
	else if(deb_buttons[3])
 408:	80 91 21 02 	lds	r24, 0x0221
 40c:	88 23       	and	r24, r24
 40e:	69 f0       	breq	.+26     	; 0x42a <__vector_16+0xec>
	{
		PORTC = osc1[count];
 410:	80 91 1b 02 	lds	r24, 0x021B
 414:	e0 91 1c 02 	lds	r30, 0x021C
 418:	f0 91 1d 02 	lds	r31, 0x021D
 41c:	e8 0f       	add	r30, r24
 41e:	f1 1d       	adc	r31, r1
 420:	80 81       	ld	r24, Z
 422:	88 b9       	out	0x08, r24	; 8
		OCR0A = note_vals[3];
 424:	8a ec       	ldi	r24, 0xCA	; 202
 426:	87 bd       	out	0x27, r24	; 39
 428:	91 c0       	rjmp	.+290    	; 0x54c <__vector_16+0x20e>
	}
	
	else if(deb_buttons[4])
 42a:	80 91 22 02 	lds	r24, 0x0222
 42e:	88 23       	and	r24, r24
 430:	a9 f0       	breq	.+42     	; 0x45c <__vector_16+0x11e>
	{
		//PORTC = osc1[count];
		PORTC = 32*osc1[count]/(128);//fmul(0b00100000, osc1[count]);
 432:	80 91 1b 02 	lds	r24, 0x021B
 436:	e0 91 1c 02 	lds	r30, 0x021C
 43a:	f0 91 1d 02 	lds	r31, 0x021D
 43e:	e8 0f       	add	r30, r24
 440:	f1 1d       	adc	r31, r1
 442:	80 81       	ld	r24, Z
 444:	20 e2       	ldi	r18, 0x20	; 32
 446:	82 9f       	mul	r24, r18
 448:	c0 01       	movw	r24, r0
 44a:	11 24       	eor	r1, r1
 44c:	88 0f       	add	r24, r24
 44e:	89 2f       	mov	r24, r25
 450:	88 1f       	adc	r24, r24
 452:	99 0b       	sbc	r25, r25
 454:	88 b9       	out	0x08, r24	; 8
		OCR0A = note_vals[4];
 456:	8e eb       	ldi	r24, 0xBE	; 190
 458:	87 bd       	out	0x27, r24	; 39
 45a:	78 c0       	rjmp	.+240    	; 0x54c <__vector_16+0x20e>
	}
	
	else if(deb_buttons[5])
 45c:	80 91 23 02 	lds	r24, 0x0223
 460:	88 23       	and	r24, r24
 462:	69 f0       	breq	.+26     	; 0x47e <__vector_16+0x140>
	{
		PORTC = osc1[count];
 464:	80 91 1b 02 	lds	r24, 0x021B
 468:	e0 91 1c 02 	lds	r30, 0x021C
 46c:	f0 91 1d 02 	lds	r31, 0x021D
 470:	e8 0f       	add	r30, r24
 472:	f1 1d       	adc	r31, r1
 474:	80 81       	ld	r24, Z
 476:	88 b9       	out	0x08, r24	; 8
		OCR0A = note_vals[5];
 478:	84 eb       	ldi	r24, 0xB4	; 180
 47a:	87 bd       	out	0x27, r24	; 39
 47c:	67 c0       	rjmp	.+206    	; 0x54c <__vector_16+0x20e>
	}
	
	
	else if(deb_buttons[6])
 47e:	80 91 24 02 	lds	r24, 0x0224
 482:	88 23       	and	r24, r24
 484:	69 f0       	breq	.+26     	; 0x4a0 <__vector_16+0x162>
	{
		PORTC = osc1[count];
 486:	80 91 1b 02 	lds	r24, 0x021B
 48a:	e0 91 1c 02 	lds	r30, 0x021C
 48e:	f0 91 1d 02 	lds	r31, 0x021D
 492:	e8 0f       	add	r30, r24
 494:	f1 1d       	adc	r31, r1
 496:	80 81       	ld	r24, Z
 498:	88 b9       	out	0x08, r24	; 8
		OCR0A = note_vals[6];
 49a:	8a ea       	ldi	r24, 0xAA	; 170
 49c:	87 bd       	out	0x27, r24	; 39
 49e:	56 c0       	rjmp	.+172    	; 0x54c <__vector_16+0x20e>
	}
	
	
	else if(deb_buttons[7])
 4a0:	80 91 25 02 	lds	r24, 0x0225
 4a4:	88 23       	and	r24, r24
 4a6:	69 f0       	breq	.+26     	; 0x4c2 <__vector_16+0x184>
	{
		PORTC = osc1[count];
 4a8:	80 91 1b 02 	lds	r24, 0x021B
 4ac:	e0 91 1c 02 	lds	r30, 0x021C
 4b0:	f0 91 1d 02 	lds	r31, 0x021D
 4b4:	e8 0f       	add	r30, r24
 4b6:	f1 1d       	adc	r31, r1
 4b8:	80 81       	ld	r24, Z
 4ba:	88 b9       	out	0x08, r24	; 8
		OCR0A = note_vals[7];
 4bc:	80 ea       	ldi	r24, 0xA0	; 160
 4be:	87 bd       	out	0x27, r24	; 39
 4c0:	45 c0       	rjmp	.+138    	; 0x54c <__vector_16+0x20e>
	}
	
	
	else if(deb_buttons[8])
 4c2:	80 91 26 02 	lds	r24, 0x0226
 4c6:	88 23       	and	r24, r24
 4c8:	69 f0       	breq	.+26     	; 0x4e4 <__vector_16+0x1a6>
	{
		PORTC = osc1[count];
 4ca:	80 91 1b 02 	lds	r24, 0x021B
 4ce:	e0 91 1c 02 	lds	r30, 0x021C
 4d2:	f0 91 1d 02 	lds	r31, 0x021D
 4d6:	e8 0f       	add	r30, r24
 4d8:	f1 1d       	adc	r31, r1
 4da:	80 81       	ld	r24, Z
 4dc:	88 b9       	out	0x08, r24	; 8
		OCR0A = note_vals[8];
 4de:	87 e9       	ldi	r24, 0x97	; 151
 4e0:	87 bd       	out	0x27, r24	; 39
 4e2:	34 c0       	rjmp	.+104    	; 0x54c <__vector_16+0x20e>
	}
	
	else if(deb_buttons[9])
 4e4:	80 91 27 02 	lds	r24, 0x0227
 4e8:	88 23       	and	r24, r24
 4ea:	69 f0       	breq	.+26     	; 0x506 <__vector_16+0x1c8>
	{
		PORTC = osc1[count];
 4ec:	80 91 1b 02 	lds	r24, 0x021B
 4f0:	e0 91 1c 02 	lds	r30, 0x021C
 4f4:	f0 91 1d 02 	lds	r31, 0x021D
 4f8:	e8 0f       	add	r30, r24
 4fa:	f1 1d       	adc	r31, r1
 4fc:	80 81       	ld	r24, Z
 4fe:	88 b9       	out	0x08, r24	; 8
		OCR0A = note_vals[9];
 500:	8f e8       	ldi	r24, 0x8F	; 143
 502:	87 bd       	out	0x27, r24	; 39
 504:	23 c0       	rjmp	.+70     	; 0x54c <__vector_16+0x20e>
	}
	
	
	else if(deb_buttons[10])
 506:	80 91 28 02 	lds	r24, 0x0228
 50a:	88 23       	and	r24, r24
 50c:	69 f0       	breq	.+26     	; 0x528 <__vector_16+0x1ea>
	{
		PORTC = osc1[count];
 50e:	80 91 1b 02 	lds	r24, 0x021B
 512:	e0 91 1c 02 	lds	r30, 0x021C
 516:	f0 91 1d 02 	lds	r31, 0x021D
 51a:	e8 0f       	add	r30, r24
 51c:	f1 1d       	adc	r31, r1
 51e:	80 81       	ld	r24, Z
 520:	88 b9       	out	0x08, r24	; 8
		OCR0A = note_vals[10];
 522:	87 e8       	ldi	r24, 0x87	; 135
 524:	87 bd       	out	0x27, r24	; 39
 526:	12 c0       	rjmp	.+36     	; 0x54c <__vector_16+0x20e>
	}
	
	
	else if(deb_buttons[11])
 528:	80 91 29 02 	lds	r24, 0x0229
 52c:	88 23       	and	r24, r24
 52e:	69 f0       	breq	.+26     	; 0x54a <__vector_16+0x20c>
	{
		PORTC = osc1[count];
 530:	80 91 1b 02 	lds	r24, 0x021B
 534:	e0 91 1c 02 	lds	r30, 0x021C
 538:	f0 91 1d 02 	lds	r31, 0x021D
 53c:	e8 0f       	add	r30, r24
 53e:	f1 1d       	adc	r31, r1
 540:	80 81       	ld	r24, Z
 542:	88 b9       	out	0x08, r24	; 8
		OCR0A = note_vals[11];
 544:	8f e7       	ldi	r24, 0x7F	; 127
 546:	87 bd       	out	0x27, r24	; 39
 548:	01 c0       	rjmp	.+2      	; 0x54c <__vector_16+0x20e>
	}
	else
		PORTC = 0;
 54a:	18 b8       	out	0x08, r1	; 8
	
	//TCNT0=0;
}
 54c:	ff 91       	pop	r31
 54e:	ef 91       	pop	r30
 550:	bf 91       	pop	r27
 552:	af 91       	pop	r26
 554:	9f 91       	pop	r25
 556:	8f 91       	pop	r24
 558:	7f 91       	pop	r23
 55a:	6f 91       	pop	r22
 55c:	5f 91       	pop	r21
 55e:	4f 91       	pop	r20
 560:	3f 91       	pop	r19
 562:	2f 91       	pop	r18
 564:	0f 90       	pop	r0
 566:	0b be       	out	0x3b, r0	; 59
 568:	0f 90       	pop	r0
 56a:	0f be       	out	0x3f, r0	; 63
 56c:	0f 90       	pop	r0
 56e:	1f 90       	pop	r1
 570:	18 95       	reti

00000572 <setup_timer1>:

void setup_timer1()
{
	TCCR1A = 0;
 572:	a0 e8       	ldi	r26, 0x80	; 128
 574:	b0 e0       	ldi	r27, 0x00	; 0
 576:	1c 92       	st	X, r1
	TCCR1B = 0;
 578:	e1 e8       	ldi	r30, 0x81	; 129
 57a:	f0 e0       	ldi	r31, 0x00	; 0
 57c:	10 82       	st	Z, r1
	TCCR1C = 0;
 57e:	10 92 82 00 	sts	0x0082, r1
	TCNT1 = 0;
 582:	10 92 85 00 	sts	0x0085, r1
 586:	10 92 84 00 	sts	0x0084, r1
	
	//TCCR1A |= (1<<COM1A1) | (1<<COM1A0) | (1<<WGM11);
	TCCR1A |= (1<<WGM11);
 58a:	8c 91       	ld	r24, X
 58c:	82 60       	ori	r24, 0x02	; 2
 58e:	8c 93       	st	X, r24
	//TCCR1B |= (1<<WGM13) | (1<<WGM12) | (1<<CS10);
	//prescaler = 8
	//TCCR1B |= (1<<WGM13) | (1<<WGM12) | (1<<CS11);
	
	//prescaler = 1024
	TCCR1B |= (1<<WGM13) | (1<<WGM12) | (1<<CS10) | (1<<CS12);
 590:	80 81       	ld	r24, Z
 592:	8d 61       	ori	r24, 0x1D	; 29
 594:	80 83       	st	Z, r24
	
	//OCR1A = 0xC000;	//set
	//OCR1A = 0xA000;
	//OCR1A = 100;
	//ICR1 = 0xF000;	//clear
	ICR1 = 100;	//clear
 596:	84 e6       	ldi	r24, 0x64	; 100
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	90 93 87 00 	sts	0x0087, r25
 59e:	80 93 86 00 	sts	0x0086, r24
	OCR1A = 50;
 5a2:	82 e3       	ldi	r24, 0x32	; 50
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	90 93 89 00 	sts	0x0089, r25
 5aa:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 =(1<<OCIE1A);
 5ae:	82 e0       	ldi	r24, 0x02	; 2
 5b0:	80 93 6f 00 	sts	0x006F, r24
 5b4:	08 95       	ret

000005b6 <setup_timer2>:

}

void setup_timer2()
{
	TCCR2A = 0;
 5b6:	a0 eb       	ldi	r26, 0xB0	; 176
 5b8:	b0 e0       	ldi	r27, 0x00	; 0
 5ba:	1c 92       	st	X, r1
	TCCR2B = 0;
 5bc:	e1 eb       	ldi	r30, 0xB1	; 177
 5be:	f0 e0       	ldi	r31, 0x00	; 0
 5c0:	10 82       	st	Z, r1
	TCNT2 = 0;
 5c2:	10 92 b2 00 	sts	0x00B2, r1
	OCR2A = 200;
 5c6:	88 ec       	ldi	r24, 0xC8	; 200
 5c8:	80 93 b3 00 	sts	0x00B3, r24
	
	TCCR2A |= (1<<WGM21) | (1<<WGM20);
 5cc:	8c 91       	ld	r24, X
 5ce:	83 60       	ori	r24, 0x03	; 3
 5d0:	8c 93       	st	X, r24
	// Prescaler = FCPU/1024
	TCCR2B |= (1<<CS20) | (1<<CS22) | (1<<WGM22);
 5d2:	80 81       	ld	r24, Z
 5d4:	8d 60       	ori	r24, 0x0D	; 13
 5d6:	80 83       	st	Z, r24
	
	
	TIMSK2 = (1<<OCIE2A);
 5d8:	82 e0       	ldi	r24, 0x02	; 2
 5da:	80 93 70 00 	sts	0x0070, r24
 5de:	08 95       	ret

000005e0 <setup_timer0>:
}

void setup_timer0()
{
	
	TCCR0A = 0;
 5e0:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
 5e2:	15 bc       	out	0x25, r1	; 37
	TCNT0 = 0;
 5e4:	16 bc       	out	0x26, r1	; 38
	OCR0A = 200;
 5e6:	88 ec       	ldi	r24, 0xC8	; 200
 5e8:	87 bd       	out	0x27, r24	; 39
	
	TCCR0A |= (1<<WGM01) | (1<<WGM00);
 5ea:	84 b5       	in	r24, 0x24	; 36
 5ec:	83 60       	ori	r24, 0x03	; 3
 5ee:	84 bd       	out	0x24, r24	; 36
	// Prescaler = FCPU
	TCCR0B |= (1<<CS00) | (1<<WGM02);
 5f0:	85 b5       	in	r24, 0x25	; 37
 5f2:	89 60       	ori	r24, 0x09	; 9
 5f4:	85 bd       	out	0x25, r24	; 37
	//TCCR0B |= (1<<FOC0B);
	
	
	//Enable Overflow Interrupt Enable
	//TIMSK0 |=(1<<TOIE0);
	TIMSK0 = (1<<OCIE0A);
 5f6:	82 e0       	ldi	r24, 0x02	; 2
 5f8:	80 93 6e 00 	sts	0x006E, r24
 5fc:	08 95       	ret

000005fe <main>:
	
}

int main(void)
{
	sei();
 5fe:	78 94       	sei
	l74hc165_init();
 600:	0e 94 67 00 	call	0xce	; 0xce <l74hc165_init>
	//osc1 = generated_attack;
	//osc1 = square_;
	//osc1 = triangle;
	//osc1 = sawtooth;
	//osc1 = sine2x;
	osc1 = sine;
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	91 e0       	ldi	r25, 0x01	; 1
 608:	90 93 1d 02 	sts	0x021D, r25
 60c:	80 93 1c 02 	sts	0x021C, r24
	//0.025
	//lowpass(osc1, square2x, 0b01110111, 0b00000101);
	
	//osc1 = prutt;
	//int n;
	DDRC = 0xff;
 610:	8f ef       	ldi	r24, 0xFF	; 255
 612:	87 b9       	out	0x07, r24	; 7
	
	
	//LCD_draw_square(1,1,20,20);
	
	
	setup_timer1();
 614:	0e 94 b9 02 	call	0x572	; 0x572 <setup_timer1>
	setup_timer0();
 618:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <setup_timer0>
	setup_timer2();
 61c:	0e 94 db 02 	call	0x5b6	; 0x5b6 <setup_timer2>
 620:	0d e2       	ldi	r16, 0x2D	; 45
 622:	14 e0       	ldi	r17, 0x04	; 4
 624:	0f 2e       	mov	r0, r31
 626:	f9 e3       	ldi	r31, 0x39	; 57
 628:	ef 2e       	mov	r14, r31
 62a:	f4 e0       	ldi	r31, 0x04	; 4
 62c:	ff 2e       	mov	r15, r31
 62e:	f0 2d       	mov	r31, r0
	
	
	
    while(1)
    {
		l74hc165_shiftin(&data);
 630:	89 e2       	ldi	r24, 0x29	; 41
 632:	94 e0       	ldi	r25, 0x04	; 4
 634:	0e 94 6d 00 	call	0xda	; 0xda <l74hc165_shiftin>
 638:	8a e1       	ldi	r24, 0x1A	; 26
 63a:	8a 95       	dec	r24
 63c:	f1 f7       	brne	.-4      	; 0x63a <main+0x3c>
 63e:	00 c0       	rjmp	.+0      	; 0x640 <main+0x42>
 640:	e8 01       	movw	r28, r16
 642:	6c 2f       	mov	r22, r28
 644:	60 1b       	sub	r22, r16
		_delay_us(10);
		for (uint8_t i=0;i<12;i++)
		{
			debounce(buttons[i],i);
 646:	89 91       	ld	r24, Y+
 648:	0e 94 a2 00 	call	0x144	; 0x144 <debounce>
	
    while(1)
    {
		l74hc165_shiftin(&data);
		_delay_us(10);
		for (uint8_t i=0;i<12;i++)
 64c:	ce 15       	cp	r28, r14
 64e:	df 05       	cpc	r29, r15
 650:	c1 f7       	brne	.-16     	; 0x642 <main+0x44>
 652:	ee cf       	rjmp	.-36     	; 0x630 <main+0x32>

00000654 <_exit>:
 654:	f8 94       	cli

00000656 <__stop_program>:
 656:	ff cf       	rjmp	.-2      	; 0x656 <__stop_program>
