
outputtest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000338  00800100  0000067a  0000070e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000067a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000212  00800438  00800438  00000a46  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a46  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  00000a76  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c52  00000000  00000000  00000b56  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000425  00000000  00000000  000017a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000529  00000000  00000000  00001bcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000274  00000000  00000000  000020f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035e  00000000  00000000  0000236c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000844  00000000  00000000  000026ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00002f0e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 ba 01 	jmp	0x374	; 0x374 <__vector_13>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <__vector_16>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__vector_24>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	14 e0       	ldi	r17, 0x04	; 4
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e7       	ldi	r30, 0x7A	; 122
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 33       	cpi	r26, 0x38	; 56
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	26 e0       	ldi	r18, 0x06	; 6
  b4:	a8 e3       	ldi	r26, 0x38	; 56
  b6:	b4 e0       	ldi	r27, 0x04	; 4
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 34       	cpi	r26, 0x4A	; 74
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 bd 02 	call	0x57a	; 0x57a <main>
  c6:	0c 94 3b 03 	jmp	0x676	; 0x676 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <l74hc165_init>:
/*
 * init the shift register
 */
void l74hc165_init() {
	//output
	L74HC165_DDR |= (1 << L74HC165_CLOCKPIN);
  ce:	24 9a       	sbi	0x04, 4	; 4
	L74HC165_DDR |= (1 << L74HC165_LOADPIN);
  d0:	20 9a       	sbi	0x04, 0	; 4
	//input
	L74HC165_DDR &= ~(1 << L74HC165_DATAPIN);
  d2:	26 98       	cbi	0x04, 6	; 4
	//low
	L74HC165_PORT &= ~(1 << L74HC165_CLOCKPIN);
  d4:	2c 98       	cbi	0x05, 4	; 5
	L74HC165_PORT &= ~(1 << L74HC165_LOADPIN);
  d6:	28 98       	cbi	0x05, 0	; 5
  d8:	08 95       	ret

000000da <l74hc165_shiftin>:
}

/*
 * shift in data
 */
void l74hc165_shiftin(uint8_t *bytearray) {
  da:	cf 93       	push	r28
	//parallel load to freeze the state of the data lines
	L74HC165_PORT &= ~(1 << L74HC165_LOADPIN);
  dc:	28 98       	cbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	40 e1       	ldi	r20, 0x10	; 16
  e0:	4a 95       	dec	r20
  e2:	f1 f7       	brne	.-4      	; 0xe0 <l74hc165_shiftin+0x6>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <l74hc165_shiftin+0xc>
	_delay_us(50);
	L74HC165_PORT |= (1 << L74HC165_LOADPIN);
  e6:	28 9a       	sbi	0x05, 0	; 5
  e8:	e8 2f       	mov	r30, r24
  ea:	f9 2f       	mov	r31, r25
  ec:	72 e0       	ldi	r23, 0x02	; 2
}

/*
 * shift in data
 */
void l74hc165_shiftin(uint8_t *bytearray) {
  ee:	c7 e0       	ldi	r28, 0x07	; 7
  f0:	b0 e0       	ldi	r27, 0x00	; 0
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	17 c0       	rjmp	.+46     	; 0x124 <l74hc165_shiftin+0x4a>
	L74HC165_PORT |= (1 << L74HC165_LOADPIN);
	for(uint8_t i = 0; i < L74HC165_ICNUMBER; i++){
		//iterate through the bits in each registers
		uint8_t currentbyte = 0;
		for(uint8_t j = 0; j < 8; j++){
			currentbyte |= ((L74HC165_PIN & (1 << L74HC165_DATAPIN))>>L74HC165_DATAPIN)<<(7-j);
  f6:	43 b1       	in	r20, 0x03	; 3
  f8:	46 fb       	bst	r20, 6
  fa:	22 27       	eor	r18, r18
  fc:	20 f9       	bld	r18, 0
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	a9 01       	movw	r20, r18
 102:	08 2e       	mov	r0, r24
 104:	02 c0       	rjmp	.+4      	; 0x10a <l74hc165_shiftin+0x30>
 106:	44 0f       	add	r20, r20
 108:	55 1f       	adc	r21, r21
 10a:	0a 94       	dec	r0
 10c:	e2 f7       	brpl	.-8      	; 0x106 <l74hc165_shiftin+0x2c>
 10e:	64 2b       	or	r22, r20
	        //get next
			L74HC165_PORT |= (1 << L74HC165_CLOCKPIN);
 110:	2c 9a       	sbi	0x05, 4	; 5
 112:	00 c0       	rjmp	.+0      	; 0x114 <l74hc165_shiftin+0x3a>
 114:	00 c0       	rjmp	.+0      	; 0x116 <l74hc165_shiftin+0x3c>
 116:	00 00       	nop
	        _delay_us(5);
	        L74HC165_PORT &= ~(1 << L74HC165_CLOCKPIN);
 118:	2c 98       	cbi	0x05, 4	; 5
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	60 f7       	brcc	.-40     	; 0xf6 <l74hc165_shiftin+0x1c>
		}
		memcpy(&bytearray[i], &currentbyte, 1);
 11e:	61 93       	st	Z+, r22
 120:	71 50       	subi	r23, 0x01	; 1
void l74hc165_shiftin(uint8_t *bytearray) {
	//parallel load to freeze the state of the data lines
	L74HC165_PORT &= ~(1 << L74HC165_LOADPIN);
	_delay_us(50);
	L74HC165_PORT |= (1 << L74HC165_LOADPIN);
	for(uint8_t i = 0; i < L74HC165_ICNUMBER; i++){
 122:	21 f0       	breq	.+8      	; 0x12c <l74hc165_shiftin+0x52>
}

/*
 * shift in data
 */
void l74hc165_shiftin(uint8_t *bytearray) {
 124:	8c 2f       	mov	r24, r28
 126:	9b 2f       	mov	r25, r27
 128:	6a 2f       	mov	r22, r26
 12a:	e5 cf       	rjmp	.-54     	; 0xf6 <l74hc165_shiftin+0x1c>
	        _delay_us(5);
	        L74HC165_PORT &= ~(1 << L74HC165_CLOCKPIN);
		}
		memcpy(&bytearray[i], &currentbyte, 1);
	}
}
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <LCD_Write>:
void LCD_Write(uint8_t data_or_command, uint8_t byte)
{
	uint8_t i;
	
	//set CE low (chip enable, inverted input)
	LCD_PORT &= ~(1<<CE);
 130:	58 98       	cbi	0x0b, 0	; 11
	
	//tell the display it's a command or data
	//if(data_or_command == LCD_COMMAND)
	if(data_or_command==LCD_DATA)
 132:	81 30       	cpi	r24, 0x01	; 1
 134:	11 f4       	brne	.+4      	; 0x13a <LCD_Write+0xa>
	LCD_PORT |= (1<<DC);
 136:	5c 9a       	sbi	0x0b, 4	; 11
 138:	0e c0       	rjmp	.+28     	; 0x156 <LCD_Write+0x26>
	else
	LCD_PORT &= ~(1<<DC);
 13a:	5c 98       	cbi	0x0b, 4	; 11
 13c:	0c c0       	rjmp	.+24     	; 0x156 <LCD_Write+0x26>
	for (i = 0; i < 8; i++)
	{

		// consider leftmost bit
		// set line high if bit is 1, low if bit is 0
		if (byte & 0x80)
 13e:	66 23       	and	r22, r22
 140:	14 f4       	brge	.+4      	; 0x146 <LCD_Write+0x16>
		LCD_PORT |= (1<<DIN);
 142:	5d 9a       	sbi	0x0b, 5	; 11
 144:	01 c0       	rjmp	.+2      	; 0x148 <LCD_Write+0x18>
		else
		LCD_PORT &= ~(1<<DIN);
 146:	5d 98       	cbi	0x0b, 5	; 11
		
		// pulse clock to indicate that bit value should be read
		LCD_PORT &= ~(1<<CLK);
 148:	5f 98       	cbi	0x0b, 7	; 11
		// shift byte left so next bit will be leftmost
		byte <<= 1;
 14a:	66 0f       	add	r22, r22
		LCD_PORT |= (1<<CLK);
 14c:	5f 9a       	sbi	0x0b, 7	; 11
 14e:	81 50       	subi	r24, 0x01	; 1
	LCD_PORT |= (1<<DC);
	else
	LCD_PORT &= ~(1<<DC);
	
	
	for (i = 0; i < 8; i++)
 150:	b1 f7       	brne	.-20     	; 0x13e <LCD_Write+0xe>
	//else
	//	LCD_PORT &= ~(1<<DC);
	
	
	//set CE high
	LCD_PORT |= (1<<CE);
 152:	58 9a       	sbi	0x0b, 0	; 11
 154:	08 95       	ret
uint8_t output = 0;
uint8_t * osc1;


void LCD_Write(uint8_t data_or_command, uint8_t byte)
{
 156:	88 e0       	ldi	r24, 0x08	; 8
 158:	f2 cf       	rjmp	.-28     	; 0x13e <LCD_Write+0xe>

0000015a <LCD_write_char>:
	LCD_PORT |= (1<<CE);
}


void LCD_write_char(uint8_t c)
{
 15a:	1f 93       	push	r17
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
	//LCD_Write(LCD_DATA, 0x00);
	uint8_t line;

	for (line=0; line<6; line++)
	{
		LCD_Write(LCD_DATA, font6x8[c-0x20][line]);
 160:	c8 2f       	mov	r28, r24
 162:	d0 e0       	ldi	r29, 0x00	; 0
 164:	a0 97       	sbiw	r28, 0x20	; 32
 166:	ce 01       	movw	r24, r28
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	c8 0f       	add	r28, r24
 16e:	d9 1f       	adc	r29, r25
 170:	cc 0f       	add	r28, r28
 172:	dd 1f       	adc	r29, r29
 174:	c1 5f       	subi	r28, 0xF1	; 241
 176:	dd 4f       	sbci	r29, 0xFD	; 253
void LCD_write_char(uint8_t c)
{
	//LCD_Write(LCD_DATA, 0x00);
	uint8_t line;

	for (line=0; line<6; line++)
 178:	10 e0       	ldi	r17, 0x00	; 0
	{
		LCD_Write(LCD_DATA, font6x8[c-0x20][line]);
 17a:	69 91       	ld	r22, Y+
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	0e 94 98 00 	call	0x130	; 0x130 <LCD_Write>
void LCD_write_char(uint8_t c)
{
	//LCD_Write(LCD_DATA, 0x00);
	uint8_t line;

	for (line=0; line<6; line++)
 182:	1f 5f       	subi	r17, 0xFF	; 255
 184:	16 30       	cpi	r17, 0x06	; 6
 186:	c9 f7       	brne	.-14     	; 0x17a <LCD_write_char+0x20>
	{
		LCD_Write(LCD_DATA, font6x8[c-0x20][line]);
	}
	
	//LCD_Write(LCD_DATA, 0x00);
}
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	1f 91       	pop	r17
 18e:	08 95       	ret

00000190 <LCD_set_XY>:

void LCD_set_XY(unsigned char X, unsigned char Y)
{
 190:	cf 93       	push	r28
 192:	c8 2f       	mov	r28, r24
	LCD_Write(0, 0x40 | Y);		// column
 194:	60 64       	ori	r22, 0x40	; 64
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	0e 94 98 00 	call	0x130	; 0x130 <LCD_Write>
	LCD_Write(0, 0x80 | X);          	// row
 19c:	6c 2f       	mov	r22, r28
 19e:	60 68       	ori	r22, 0x80	; 128
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	0e 94 98 00 	call	0x130	; 0x130 <LCD_Write>
}
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <LCD_write_string>:
	}
	
}

void LCD_write_string(unsigned char X,unsigned char Y,char *s)
{
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	ea 01       	movw	r28, r20
	LCD_set_XY(X,Y);
 1b0:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_set_XY>
	while (*s)
 1b4:	88 81       	ld	r24, Y
 1b6:	88 23       	and	r24, r24
 1b8:	31 f0       	breq	.+12     	; 0x1c6 <LCD_write_string+0x1c>
 1ba:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_write_char(*s++);
 1bc:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_write_char>
}

void LCD_write_string(unsigned char X,unsigned char Y,char *s)
{
	LCD_set_XY(X,Y);
	while (*s)
 1c0:	89 91       	ld	r24, Y+
 1c2:	81 11       	cpse	r24, r1
 1c4:	fb cf       	rjmp	.-10     	; 0x1bc <LCD_write_string+0x12>
	{
		LCD_write_char(*s++);
		//s++;
	}
}
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <LCD_clear>:


void LCD_clear(void)          // clear the LCD
{
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	c8 ef       	ldi	r28, 0xF8	; 248
 1d2:	d1 e0       	ldi	r29, 0x01	; 1
	//LCD_Write(0, 0x0C);
	//LCD_Write(0, 0x80);		//set address of RAM, 0x80 is 0,0

	for (i=0; i<504; i++)	//504 = 84*48/8
	{
		LCD_Write(LCD_DATA, 0x00);
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	0e 94 98 00 	call	0x130	; 0x130 <LCD_Write>
 1dc:	21 97       	sbiw	r28, 0x01	; 1
	uint16_t i;

	//LCD_Write(0, 0x0C);
	//LCD_Write(0, 0x80);		//set address of RAM, 0x80 is 0,0

	for (i=0; i<504; i++)	//504 = 84*48/8
 1de:	20 97       	sbiw	r28, 0x00	; 0
 1e0:	c9 f7       	brne	.-14     	; 0x1d4 <LCD_clear+0x8>
	{
		LCD_Write(LCD_DATA, 0x00);
	}
}
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <Init_LCD>:
}

void Init_LCD()
{
	//try some shit
	LCD_DDR = 0xFF;
 1e8:	8f ef       	ldi	r24, 0xFF	; 255
 1ea:	8a b9       	out	0x0a, r24	; 10
	LCD_PORT &= ~(1<<RST);
 1ec:	59 98       	cbi	0x0b, 1	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ee:	2f ef       	ldi	r18, 0xFF	; 255
 1f0:	80 e7       	ldi	r24, 0x70	; 112
 1f2:	92 e0       	ldi	r25, 0x02	; 2
 1f4:	21 50       	subi	r18, 0x01	; 1
 1f6:	80 40       	sbci	r24, 0x00	; 0
 1f8:	90 40       	sbci	r25, 0x00	; 0
 1fa:	e1 f7       	brne	.-8      	; 0x1f4 <Init_LCD+0xc>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <Init_LCD+0x16>
 1fe:	00 00       	nop
	_delay_ms(100);
	LCD_PORT |= (1<<RST);
 200:	59 9a       	sbi	0x0b, 1	; 11
	LCD_PORT &= ~(1<<CE);
 202:	58 98       	cbi	0x0b, 0	; 11
 204:	8f e0       	ldi	r24, 0x0F	; 15
 206:	97 e2       	ldi	r25, 0x27	; 39
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <Init_LCD+0x20>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <Init_LCD+0x26>
 20e:	00 00       	nop
	_delay_ms(5);
	LCD_PORT &= ~(1<<RST);
 210:	59 98       	cbi	0x0b, 1	; 11
	asm("nop");
 212:	00 00       	nop
	LCD_PORT |= (1<<RST);
 214:	59 9a       	sbi	0x0b, 1	; 11
	//DDRD |= 0xff;
	
	//LCD_PORT = 0;
	
	//reset
	LCD_PORT &= ~(1<<RST);
 216:	59 98       	cbi	0x0b, 1	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 218:	92 e0       	ldi	r25, 0x02	; 2
 21a:	9a 95       	dec	r25
 21c:	f1 f7       	brne	.-4      	; 0x21a <Init_LCD+0x32>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <Init_LCD+0x38>
	_delay_us(1);
	LCD_PORT |= (1<<RST);
 220:	59 9a       	sbi	0x0b, 1	; 11
	
	LCD_PORT &= ~(1<<CE);
 222:	58 98       	cbi	0x0b, 0	; 11
 224:	22 e0       	ldi	r18, 0x02	; 2
 226:	2a 95       	dec	r18
 228:	f1 f7       	brne	.-4      	; 0x226 <Init_LCD+0x3e>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <Init_LCD+0x44>
	_delay_us(1);
	LCD_PORT |= (1<<CE);
 22c:	58 9a       	sbi	0x0b, 0	; 11
 22e:	82 e0       	ldi	r24, 0x02	; 2
 230:	8a 95       	dec	r24
 232:	f1 f7       	brne	.-4      	; 0x230 <Init_LCD+0x48>
 234:	00 c0       	rjmp	.+0      	; 0x236 <Init_LCD+0x4e>
	_delay_us(1);
	
	LCD_PORT |= (1<<RST);
 236:	59 9a       	sbi	0x0b, 1	; 11
	
	LCD_Write(LCD_COMMAND, 0x21);	//Tell LCD that extended commands follow
 238:	61 e2       	ldi	r22, 0x21	; 33
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	0e 94 98 00 	call	0x130	; 0x130 <LCD_Write>
	LCD_Write(LCD_COMMAND, 0xC1);	//Set LCD Vop (Contrast): Try 0xB1(good @ 3.3V) or 0xBF if your display is too dark
 240:	61 ec       	ldi	r22, 0xC1	; 193
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	0e 94 98 00 	call	0x130	; 0x130 <LCD_Write>
	LCD_Write(LCD_COMMAND, 0x06);	//Set temp coeff
 248:	66 e0       	ldi	r22, 0x06	; 6
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	0e 94 98 00 	call	0x130	; 0x130 <LCD_Write>
	LCD_Write(LCD_COMMAND, 0x13);	//LCD bias mode 1:48: Try 0x13 or 0x14
 250:	63 e1       	ldi	r22, 0x13	; 19
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	0e 94 98 00 	call	0x130	; 0x130 <LCD_Write>
	
	LCD_Write(LCD_COMMAND, 0x20);	//We must send 0x20 before modifying the display control mode
 258:	60 e2       	ldi	r22, 0x20	; 32
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	0e 94 98 00 	call	0x130	; 0x130 <LCD_Write>
	LCD_clear();
 260:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_clear>
	LCD_Write(LCD_COMMAND, 0x0C);	//Set display control, normal mode. 0x0D for inverse, 0x0C for non-inverse
 264:	6c e0       	ldi	r22, 0x0C	; 12
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	0e 94 98 00 	call	0x130	; 0x130 <LCD_Write>
	//LCD_Write(LCD_COMMAND, 0x09);	//all segments on
	
	LCD_PORT &= ~(1<<CE);
 26c:	58 98       	cbi	0x0b, 0	; 11
 26e:	08 95       	ret

00000270 <populate_buttons>:
}


void populate_buttons()
{
	if((uint16_t)*data & 1) //4:th button
 270:	80 91 3a 06 	lds	r24, 0x063A
 274:	90 91 3b 06 	lds	r25, 0x063B
 278:	80 ff       	sbrs	r24, 0
 27a:	04 c0       	rjmp	.+8      	; 0x284 <populate_buttons+0x14>
	  //buttons |= (1<<3);
	  buttons[3] = 1;
 27c:	21 e0       	ldi	r18, 0x01	; 1
 27e:	20 93 41 06 	sts	0x0641, r18
 282:	02 c0       	rjmp	.+4      	; 0x288 <populate_buttons+0x18>
	else
	  buttons[3] = 0;
 284:	10 92 41 06 	sts	0x0641, r1
	
	if((uint16_t)*data & 2)
 288:	81 ff       	sbrs	r24, 1
 28a:	04 c0       	rjmp	.+8      	; 0x294 <populate_buttons+0x24>
	  //buttons |= (1<<2);
	  buttons[2] = 1;
 28c:	21 e0       	ldi	r18, 0x01	; 1
 28e:	20 93 40 06 	sts	0x0640, r18
 292:	02 c0       	rjmp	.+4      	; 0x298 <populate_buttons+0x28>
	else
	  buttons[2] = 0;
 294:	10 92 40 06 	sts	0x0640, r1
	
	if((uint16_t)*data & 4)
 298:	82 ff       	sbrs	r24, 2
 29a:	04 c0       	rjmp	.+8      	; 0x2a4 <populate_buttons+0x34>
	  //buttons |= (1<<1);
	  buttons[1] = 1;
 29c:	21 e0       	ldi	r18, 0x01	; 1
 29e:	20 93 3f 06 	sts	0x063F, r18
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <populate_buttons+0x38>
	else
	  buttons[1] = 0;
 2a4:	10 92 3f 06 	sts	0x063F, r1
	
	if((uint16_t)*data & 8)
 2a8:	83 ff       	sbrs	r24, 3
 2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <populate_buttons+0x44>
	  //buttons |= (1<<0);
	  buttons[0] = 1;
 2ac:	21 e0       	ldi	r18, 0x01	; 1
 2ae:	20 93 3e 06 	sts	0x063E, r18
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <populate_buttons+0x48>
	else
	  buttons[0] = 0;
 2b4:	10 92 3e 06 	sts	0x063E, r1
	  
	if((uint16_t)*data & 256)
 2b8:	90 ff       	sbrs	r25, 0
 2ba:	04 c0       	rjmp	.+8      	; 0x2c4 <populate_buttons+0x54>
	  //buttons |= (1<<11);
	  buttons[11] = 1;
 2bc:	21 e0       	ldi	r18, 0x01	; 1
 2be:	20 93 49 06 	sts	0x0649, r18
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <populate_buttons+0x58>
	else
	  buttons[11] = 0;
 2c4:	10 92 49 06 	sts	0x0649, r1
	  
	if((uint16_t)*data & 512)
 2c8:	91 ff       	sbrs	r25, 1
 2ca:	04 c0       	rjmp	.+8      	; 0x2d4 <populate_buttons+0x64>
	  //buttons |= (1<<10);
	  buttons[10] = 1;
 2cc:	21 e0       	ldi	r18, 0x01	; 1
 2ce:	20 93 48 06 	sts	0x0648, r18
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <populate_buttons+0x68>
	else
	  buttons[10] = 0;
 2d4:	10 92 48 06 	sts	0x0648, r1
	  
	if((uint16_t)*data & 1024)
 2d8:	92 ff       	sbrs	r25, 2
 2da:	04 c0       	rjmp	.+8      	; 0x2e4 <populate_buttons+0x74>
	  //buttons |= (1<<9);
	  buttons[9] = 1;
 2dc:	21 e0       	ldi	r18, 0x01	; 1
 2de:	20 93 47 06 	sts	0x0647, r18
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <populate_buttons+0x78>
	else
	  buttons[9] = 0;
 2e4:	10 92 47 06 	sts	0x0647, r1
	
	if((uint16_t)*data & 2048)
 2e8:	93 ff       	sbrs	r25, 3
 2ea:	04 c0       	rjmp	.+8      	; 0x2f4 <populate_buttons+0x84>
	  //buttons |= (1<<8);
	  buttons[8] = 1;
 2ec:	21 e0       	ldi	r18, 0x01	; 1
 2ee:	20 93 46 06 	sts	0x0646, r18
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <populate_buttons+0x88>
	else
	  buttons[8] = 0;
 2f4:	10 92 46 06 	sts	0x0646, r1
	  
	if((uint16_t)*data & 4096)
 2f8:	94 ff       	sbrs	r25, 4
 2fa:	04 c0       	rjmp	.+8      	; 0x304 <populate_buttons+0x94>
	  //buttons |= (1<<7);
	  buttons[7] = 1;
 2fc:	21 e0       	ldi	r18, 0x01	; 1
 2fe:	20 93 45 06 	sts	0x0645, r18
 302:	02 c0       	rjmp	.+4      	; 0x308 <populate_buttons+0x98>
	else
	  buttons[7] = 0;
 304:	10 92 45 06 	sts	0x0645, r1
	
	if((uint16_t)*data & 8192)
 308:	95 ff       	sbrs	r25, 5
 30a:	04 c0       	rjmp	.+8      	; 0x314 <populate_buttons+0xa4>
	  //buttons |= (1<<6);
	  buttons[6] = 1;
 30c:	21 e0       	ldi	r18, 0x01	; 1
 30e:	20 93 44 06 	sts	0x0644, r18
 312:	02 c0       	rjmp	.+4      	; 0x318 <populate_buttons+0xa8>
	else
	  buttons[6] = 0;
 314:	10 92 44 06 	sts	0x0644, r1
	
	if((uint16_t)*data & 16384)
 318:	96 ff       	sbrs	r25, 6
 31a:	04 c0       	rjmp	.+8      	; 0x324 <populate_buttons+0xb4>
	  //buttons |= (1<<5);
	  buttons[5] = 1;
 31c:	21 e0       	ldi	r18, 0x01	; 1
 31e:	20 93 43 06 	sts	0x0643, r18
 322:	02 c0       	rjmp	.+4      	; 0x328 <populate_buttons+0xb8>
	else
	  buttons[5] = 0;
 324:	10 92 43 06 	sts	0x0643, r1
	  
	if((uint16_t)*data & 32768) //5:th button
 328:	99 23       	and	r25, r25
 32a:	24 f4       	brge	.+8      	; 0x334 <populate_buttons+0xc4>
	  //buttons |= (1<<4);
	  buttons[4] = 1;
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	80 93 42 06 	sts	0x0642, r24
 332:	08 95       	ret
	else
	  buttons[4] = 0;
 334:	10 92 42 06 	sts	0x0642, r1
 338:	08 95       	ret

0000033a <__vector_24>:
	
}
*/

ISR(ADC_vect)
{
 33a:	1f 92       	push	r1
 33c:	0f 92       	push	r0
 33e:	0f b6       	in	r0, 0x3f	; 63
 340:	0f 92       	push	r0
 342:	11 24       	eor	r1, r1
 344:	0b b6       	in	r0, 0x3b	; 59
 346:	0f 92       	push	r0
 348:	8f 93       	push	r24
 34a:	ef 93       	push	r30
 34c:	ff 93       	push	r31
	//char adc_res[4];
	pot_data = ADCH;
 34e:	80 91 79 00 	lds	r24, 0x0079
 352:	80 93 35 06 	sts	0x0635, r24
	//itoa(pot_data, adc_res, 10);
	//LCD_write_string(5,5,&adc_res);
	
	ADCSRA |= (1<<ADSC);
 356:	ea e7       	ldi	r30, 0x7A	; 122
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	80 81       	ld	r24, Z
 35c:	80 64       	ori	r24, 0x40	; 64
 35e:	80 83       	st	Z, r24
}
 360:	ff 91       	pop	r31
 362:	ef 91       	pop	r30
 364:	8f 91       	pop	r24
 366:	0f 90       	pop	r0
 368:	0b be       	out	0x3b, r0	; 59
 36a:	0f 90       	pop	r0
 36c:	0f be       	out	0x3f, r0	; 63
 36e:	0f 90       	pop	r0
 370:	1f 90       	pop	r1
 372:	18 95       	reti

00000374 <__vector_13>:

ISR(TIMER1_COMPA_vect)
{
 374:	1f 92       	push	r1
 376:	0f 92       	push	r0
 378:	0f b6       	in	r0, 0x3f	; 63
 37a:	0f 92       	push	r0
 37c:	11 24       	eor	r1, r1
 37e:	0b b6       	in	r0, 0x3b	; 59
 380:	0f 92       	push	r0
 382:	2f 93       	push	r18
 384:	3f 93       	push	r19
 386:	4f 93       	push	r20
 388:	5f 93       	push	r21
 38a:	6f 93       	push	r22
 38c:	7f 93       	push	r23
 38e:	8f 93       	push	r24
 390:	9f 93       	push	r25
 392:	af 93       	push	r26
 394:	bf 93       	push	r27
 396:	ef 93       	push	r30
 398:	ff 93       	push	r31
	//count += 1;
	
	populate_buttons();
 39a:	0e 94 38 01 	call	0x270	; 0x270 <populate_buttons>
	LCD_Write(LCD_DATA, 0xab);
	LCD_Write(LCD_DATA, 0x10);
	LCD_Write(LCD_DATA, 0x14);
	LCD_Write(LCD_DATA, 0x03);
	*/
}
 39e:	ff 91       	pop	r31
 3a0:	ef 91       	pop	r30
 3a2:	bf 91       	pop	r27
 3a4:	af 91       	pop	r26
 3a6:	9f 91       	pop	r25
 3a8:	8f 91       	pop	r24
 3aa:	7f 91       	pop	r23
 3ac:	6f 91       	pop	r22
 3ae:	5f 91       	pop	r21
 3b0:	4f 91       	pop	r20
 3b2:	3f 91       	pop	r19
 3b4:	2f 91       	pop	r18
 3b6:	0f 90       	pop	r0
 3b8:	0b be       	out	0x3b, r0	; 59
 3ba:	0f 90       	pop	r0
 3bc:	0f be       	out	0x3f, r0	; 63
 3be:	0f 90       	pop	r0
 3c0:	1f 90       	pop	r1
 3c2:	18 95       	reti

000003c4 <__vector_16>:


//ISR(TIMER0_OVF_vect)
ISR(TIMER0_COMPA_vect)
{
 3c4:	1f 92       	push	r1
 3c6:	0f 92       	push	r0
 3c8:	0f b6       	in	r0, 0x3f	; 63
 3ca:	0f 92       	push	r0
 3cc:	11 24       	eor	r1, r1
 3ce:	0b b6       	in	r0, 0x3b	; 59
 3d0:	0f 92       	push	r0
 3d2:	8f 93       	push	r24
 3d4:	9f 93       	push	r25
 3d6:	ef 93       	push	r30
 3d8:	ff 93       	push	r31
	
	count += 4;
 3da:	80 91 38 04 	lds	r24, 0x0438
 3de:	8c 5f       	subi	r24, 0xFC	; 252
 3e0:	80 93 38 04 	sts	0x0438, r24
	//  count = 0;
	
	//PORTC = osc1[count];
	
	
	if(buttons[0])
 3e4:	90 91 3e 06 	lds	r25, 0x063E
 3e8:	99 23       	and	r25, r25
 3ea:	59 f0       	breq	.+22     	; 0x402 <__vector_16+0x3e>
	{
		PORTC = osc1[count];
 3ec:	e0 91 39 04 	lds	r30, 0x0439
 3f0:	f0 91 3a 04 	lds	r31, 0x043A
 3f4:	e8 0f       	add	r30, r24
 3f6:	f1 1d       	adc	r31, r1
 3f8:	80 81       	ld	r24, Z
 3fa:	88 b9       	out	0x08, r24	; 8
		OCR0A = note_vals[0];
 3fc:	80 ef       	ldi	r24, 0xF0	; 240
 3fe:	87 bd       	out	0x27, r24	; 39
 400:	a6 c0       	rjmp	.+332    	; 0x54e <__vector_16+0x18a>
	}
	
	else if(buttons[1])
 402:	90 91 3f 06 	lds	r25, 0x063F
 406:	99 23       	and	r25, r25
 408:	59 f0       	breq	.+22     	; 0x420 <__vector_16+0x5c>
	{
		PORTC = osc1[count];
 40a:	e0 91 39 04 	lds	r30, 0x0439
 40e:	f0 91 3a 04 	lds	r31, 0x043A
 412:	e8 0f       	add	r30, r24
 414:	f1 1d       	adc	r31, r1
 416:	80 81       	ld	r24, Z
 418:	88 b9       	out	0x08, r24	; 8
		OCR0A = note_vals[1];
 41a:	82 ee       	ldi	r24, 0xE2	; 226
 41c:	87 bd       	out	0x27, r24	; 39
 41e:	97 c0       	rjmp	.+302    	; 0x54e <__vector_16+0x18a>
	}
	
	else if(buttons[2])
 420:	90 91 40 06 	lds	r25, 0x0640
 424:	99 23       	and	r25, r25
 426:	59 f0       	breq	.+22     	; 0x43e <__vector_16+0x7a>
	{
		PORTC = osc1[count];
 428:	e0 91 39 04 	lds	r30, 0x0439
 42c:	f0 91 3a 04 	lds	r31, 0x043A
 430:	e8 0f       	add	r30, r24
 432:	f1 1d       	adc	r31, r1
 434:	80 81       	ld	r24, Z
 436:	88 b9       	out	0x08, r24	; 8
		OCR0A = note_vals[2];
 438:	86 ed       	ldi	r24, 0xD6	; 214
 43a:	87 bd       	out	0x27, r24	; 39
 43c:	88 c0       	rjmp	.+272    	; 0x54e <__vector_16+0x18a>
	}
	
	else if(buttons[3])
 43e:	90 91 41 06 	lds	r25, 0x0641
 442:	99 23       	and	r25, r25
 444:	59 f0       	breq	.+22     	; 0x45c <__vector_16+0x98>
	{
		PORTC = osc1[count];
 446:	e0 91 39 04 	lds	r30, 0x0439
 44a:	f0 91 3a 04 	lds	r31, 0x043A
 44e:	e8 0f       	add	r30, r24
 450:	f1 1d       	adc	r31, r1
 452:	80 81       	ld	r24, Z
 454:	88 b9       	out	0x08, r24	; 8
		OCR0A = note_vals[3];
 456:	8a ec       	ldi	r24, 0xCA	; 202
 458:	87 bd       	out	0x27, r24	; 39
 45a:	79 c0       	rjmp	.+242    	; 0x54e <__vector_16+0x18a>
	}
	
	else if(buttons[4])
 45c:	90 91 42 06 	lds	r25, 0x0642
 460:	99 23       	and	r25, r25
 462:	59 f0       	breq	.+22     	; 0x47a <__vector_16+0xb6>
	{
		PORTC = osc1[count];
 464:	e0 91 39 04 	lds	r30, 0x0439
 468:	f0 91 3a 04 	lds	r31, 0x043A
 46c:	e8 0f       	add	r30, r24
 46e:	f1 1d       	adc	r31, r1
 470:	80 81       	ld	r24, Z
 472:	88 b9       	out	0x08, r24	; 8
		OCR0A = note_vals[4];
 474:	8e eb       	ldi	r24, 0xBE	; 190
 476:	87 bd       	out	0x27, r24	; 39
 478:	6a c0       	rjmp	.+212    	; 0x54e <__vector_16+0x18a>
	}
	
	else if(buttons[5])
 47a:	90 91 43 06 	lds	r25, 0x0643
 47e:	99 23       	and	r25, r25
 480:	59 f0       	breq	.+22     	; 0x498 <__vector_16+0xd4>
	{
		PORTC = osc1[count];
 482:	e0 91 39 04 	lds	r30, 0x0439
 486:	f0 91 3a 04 	lds	r31, 0x043A
 48a:	e8 0f       	add	r30, r24
 48c:	f1 1d       	adc	r31, r1
 48e:	80 81       	ld	r24, Z
 490:	88 b9       	out	0x08, r24	; 8
		OCR0A = note_vals[5];
 492:	84 eb       	ldi	r24, 0xB4	; 180
 494:	87 bd       	out	0x27, r24	; 39
 496:	5b c0       	rjmp	.+182    	; 0x54e <__vector_16+0x18a>
	}
	
	
	else if(buttons[6])
 498:	90 91 44 06 	lds	r25, 0x0644
 49c:	99 23       	and	r25, r25
 49e:	59 f0       	breq	.+22     	; 0x4b6 <__vector_16+0xf2>
	{
		PORTC = osc1[count];
 4a0:	e0 91 39 04 	lds	r30, 0x0439
 4a4:	f0 91 3a 04 	lds	r31, 0x043A
 4a8:	e8 0f       	add	r30, r24
 4aa:	f1 1d       	adc	r31, r1
 4ac:	80 81       	ld	r24, Z
 4ae:	88 b9       	out	0x08, r24	; 8
		OCR0A = note_vals[6];
 4b0:	8a ea       	ldi	r24, 0xAA	; 170
 4b2:	87 bd       	out	0x27, r24	; 39
 4b4:	4c c0       	rjmp	.+152    	; 0x54e <__vector_16+0x18a>
	}
	
	
	else if(buttons[7])
 4b6:	90 91 45 06 	lds	r25, 0x0645
 4ba:	99 23       	and	r25, r25
 4bc:	59 f0       	breq	.+22     	; 0x4d4 <__vector_16+0x110>
	{
		PORTC = osc1[count];
 4be:	e0 91 39 04 	lds	r30, 0x0439
 4c2:	f0 91 3a 04 	lds	r31, 0x043A
 4c6:	e8 0f       	add	r30, r24
 4c8:	f1 1d       	adc	r31, r1
 4ca:	80 81       	ld	r24, Z
 4cc:	88 b9       	out	0x08, r24	; 8
		OCR0A = note_vals[7];
 4ce:	80 ea       	ldi	r24, 0xA0	; 160
 4d0:	87 bd       	out	0x27, r24	; 39
 4d2:	3d c0       	rjmp	.+122    	; 0x54e <__vector_16+0x18a>
	}
	
	
	else if(buttons[8])
 4d4:	90 91 46 06 	lds	r25, 0x0646
 4d8:	99 23       	and	r25, r25
 4da:	59 f0       	breq	.+22     	; 0x4f2 <__vector_16+0x12e>
	{
		PORTC = osc1[count];
 4dc:	e0 91 39 04 	lds	r30, 0x0439
 4e0:	f0 91 3a 04 	lds	r31, 0x043A
 4e4:	e8 0f       	add	r30, r24
 4e6:	f1 1d       	adc	r31, r1
 4e8:	80 81       	ld	r24, Z
 4ea:	88 b9       	out	0x08, r24	; 8
		OCR0A = note_vals[8];
 4ec:	87 e9       	ldi	r24, 0x97	; 151
 4ee:	87 bd       	out	0x27, r24	; 39
 4f0:	2e c0       	rjmp	.+92     	; 0x54e <__vector_16+0x18a>
	}
	
	else if(buttons[9])
 4f2:	90 91 47 06 	lds	r25, 0x0647
 4f6:	99 23       	and	r25, r25
 4f8:	59 f0       	breq	.+22     	; 0x510 <__vector_16+0x14c>
	{
		PORTC = osc1[count];
 4fa:	e0 91 39 04 	lds	r30, 0x0439
 4fe:	f0 91 3a 04 	lds	r31, 0x043A
 502:	e8 0f       	add	r30, r24
 504:	f1 1d       	adc	r31, r1
 506:	80 81       	ld	r24, Z
 508:	88 b9       	out	0x08, r24	; 8
		OCR0A = note_vals[9];
 50a:	8f e8       	ldi	r24, 0x8F	; 143
 50c:	87 bd       	out	0x27, r24	; 39
 50e:	1f c0       	rjmp	.+62     	; 0x54e <__vector_16+0x18a>
	}
	
	
	else if(buttons[10])
 510:	90 91 48 06 	lds	r25, 0x0648
 514:	99 23       	and	r25, r25
 516:	59 f0       	breq	.+22     	; 0x52e <__vector_16+0x16a>
	{
		PORTC = osc1[count];
 518:	e0 91 39 04 	lds	r30, 0x0439
 51c:	f0 91 3a 04 	lds	r31, 0x043A
 520:	e8 0f       	add	r30, r24
 522:	f1 1d       	adc	r31, r1
 524:	80 81       	ld	r24, Z
 526:	88 b9       	out	0x08, r24	; 8
		OCR0A = note_vals[10];
 528:	87 e8       	ldi	r24, 0x87	; 135
 52a:	87 bd       	out	0x27, r24	; 39
 52c:	10 c0       	rjmp	.+32     	; 0x54e <__vector_16+0x18a>
	}
	
	
	else if(buttons[11])
 52e:	90 91 49 06 	lds	r25, 0x0649
 532:	99 23       	and	r25, r25
 534:	59 f0       	breq	.+22     	; 0x54c <__vector_16+0x188>
	{
		PORTC = osc1[count];
 536:	e0 91 39 04 	lds	r30, 0x0439
 53a:	f0 91 3a 04 	lds	r31, 0x043A
 53e:	e8 0f       	add	r30, r24
 540:	f1 1d       	adc	r31, r1
 542:	80 81       	ld	r24, Z
 544:	88 b9       	out	0x08, r24	; 8
		OCR0A = note_vals[11];
 546:	8f e7       	ldi	r24, 0x7F	; 127
 548:	87 bd       	out	0x27, r24	; 39
 54a:	01 c0       	rjmp	.+2      	; 0x54e <__vector_16+0x18a>
	}
	else
		PORTC = 0;
 54c:	18 b8       	out	0x08, r1	; 8
	
	//TCNT0=0;
}
 54e:	ff 91       	pop	r31
 550:	ef 91       	pop	r30
 552:	9f 91       	pop	r25
 554:	8f 91       	pop	r24
 556:	0f 90       	pop	r0
 558:	0b be       	out	0x3b, r0	; 59
 55a:	0f 90       	pop	r0
 55c:	0f be       	out	0x3f, r0	; 63
 55e:	0f 90       	pop	r0
 560:	1f 90       	pop	r1
 562:	18 95       	reti

00000564 <setup_adc>:
}

void setup_adc()
{
	//enable ADC, 1 1 1 = 128 prescaler = 8 MHz/128 = 62.5 kHz
	ADCSRA |= (1<<ADEN) | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2) | (1<<ADIE) | (1<<ADSC);
 564:	ea e7       	ldi	r30, 0x7A	; 122
 566:	f0 e0       	ldi	r31, 0x00	; 0
 568:	80 81       	ld	r24, Z
 56a:	8f 6c       	ori	r24, 0xCF	; 207
 56c:	80 83       	st	Z, r24
	ADMUX |= (1<<ADLAR);
 56e:	ec e7       	ldi	r30, 0x7C	; 124
 570:	f0 e0       	ldi	r31, 0x00	; 0
 572:	80 81       	ld	r24, Z
 574:	80 62       	ori	r24, 0x20	; 32
 576:	80 83       	st	Z, r24
 578:	08 95       	ret

0000057a <main>:
	
}

int main(void)
{
 57a:	cf 93       	push	r28
 57c:	df 93       	push	r29
 57e:	00 d0       	rcall	.+0      	; 0x580 <main+0x6>
 580:	00 d0       	rcall	.+0      	; 0x582 <main+0x8>
 582:	cd b7       	in	r28, 0x3d	; 61
 584:	de b7       	in	r29, 0x3e	; 62
	sei();
 586:	78 94       	sei
	l74hc165_init();
 588:	0e 94 67 00 	call	0xce	; 0xce <l74hc165_init>
	osc1 = sine;
 58c:	80 e0       	ldi	r24, 0x00	; 0
 58e:	91 e0       	ldi	r25, 0x01	; 1
 590:	90 93 3a 04 	sts	0x043A, r25
 594:	80 93 39 04 	sts	0x0439, r24
	//osc1 = square_;
	//osc1 = triangle;
	//osc1 = prutt;
	//int n;
	
	DDRC = 0xff;
 598:	8f ef       	ldi	r24, 0xFF	; 255
 59a:	87 b9       	out	0x07, r24	; 7
	
	Init_LCD();
 59c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <Init_LCD>
	LCD_clear();
 5a0:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_clear>
	
	LCD_write_string(0,0,"Erik <3 Klara!");
 5a4:	40 e0       	ldi	r20, 0x00	; 0
 5a6:	52 e0       	ldi	r21, 0x02	; 2
 5a8:	60 e0       	ldi	r22, 0x00	; 0
 5aa:	80 e0       	ldi	r24, 0x00	; 0
 5ac:	0e 94 d5 00 	call	0x1aa	; 0x1aa <LCD_write_string>
	//LCD_draw_square(1,1,20,20);
	
	
	//setup_timer1();
	//setup_timer0();
	setup_adc();
 5b0:	0e 94 b2 02 	call	0x564	; 0x564 <setup_adc>
	
	char test[4];
	
    while(1)
    {
		itoa(pot_data, test, 10);
 5b4:	80 91 35 06 	lds	r24, 0x0635
 5b8:	4a e0       	ldi	r20, 0x0A	; 10
 5ba:	50 e0       	ldi	r21, 0x00	; 0
 5bc:	be 01       	movw	r22, r28
 5be:	6f 5f       	subi	r22, 0xFF	; 255
 5c0:	7f 4f       	sbci	r23, 0xFF	; 255
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <itoa>
		LCD_write_string(5,5,&test);
 5c8:	ae 01       	movw	r20, r28
 5ca:	4f 5f       	subi	r20, 0xFF	; 255
 5cc:	5f 4f       	sbci	r21, 0xFF	; 255
 5ce:	65 e0       	ldi	r22, 0x05	; 5
 5d0:	85 e0       	ldi	r24, 0x05	; 5
 5d2:	0e 94 d5 00 	call	0x1aa	; 0x1aa <LCD_write_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5d6:	2f ef       	ldi	r18, 0xFF	; 255
 5d8:	80 e7       	ldi	r24, 0x70	; 112
 5da:	92 e0       	ldi	r25, 0x02	; 2
 5dc:	21 50       	subi	r18, 0x01	; 1
 5de:	80 40       	sbci	r24, 0x00	; 0
 5e0:	90 40       	sbci	r25, 0x00	; 0
 5e2:	e1 f7       	brne	.-8      	; 0x5dc <main+0x62>
 5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <main+0x6c>
 5e6:	00 00       	nop
		_delay_ms(100);
		LCD_clear();
 5e8:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_clear>
		//LCD_write_string(0,0,"Erik <3 Klara");
		//asm("nop");
		//LCD_write_string(10,10,"HEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJ!!!");
		//LCD_write_char('E');
		
		l74hc165_shiftin(&data);
 5ec:	8a e3       	ldi	r24, 0x3A	; 58
 5ee:	96 e0       	ldi	r25, 0x06	; 6
 5f0:	0e 94 6d 00 	call	0xda	; 0xda <l74hc165_shiftin>
 5f4:	df cf       	rjmp	.-66     	; 0x5b4 <main+0x3a>

000005f6 <itoa>:
 5f6:	45 32       	cpi	r20, 0x25	; 37
 5f8:	51 05       	cpc	r21, r1
 5fa:	20 f4       	brcc	.+8      	; 0x604 <itoa+0xe>
 5fc:	42 30       	cpi	r20, 0x02	; 2
 5fe:	10 f0       	brcs	.+4      	; 0x604 <itoa+0xe>
 600:	0c 94 06 03 	jmp	0x60c	; 0x60c <__itoa_ncheck>
 604:	fb 01       	movw	r30, r22
 606:	10 82       	st	Z, r1
 608:	cb 01       	movw	r24, r22
 60a:	08 95       	ret

0000060c <__itoa_ncheck>:
 60c:	bb 27       	eor	r27, r27
 60e:	4a 30       	cpi	r20, 0x0A	; 10
 610:	31 f4       	brne	.+12     	; 0x61e <__itoa_ncheck+0x12>
 612:	99 23       	and	r25, r25
 614:	22 f4       	brpl	.+8      	; 0x61e <__itoa_ncheck+0x12>
 616:	bd e2       	ldi	r27, 0x2D	; 45
 618:	90 95       	com	r25
 61a:	81 95       	neg	r24
 61c:	9f 4f       	sbci	r25, 0xFF	; 255
 61e:	0c 94 12 03 	jmp	0x624	; 0x624 <__utoa_common>

00000622 <__utoa_ncheck>:
 622:	bb 27       	eor	r27, r27

00000624 <__utoa_common>:
 624:	fb 01       	movw	r30, r22
 626:	55 27       	eor	r21, r21
 628:	aa 27       	eor	r26, r26
 62a:	88 0f       	add	r24, r24
 62c:	99 1f       	adc	r25, r25
 62e:	aa 1f       	adc	r26, r26
 630:	a4 17       	cp	r26, r20
 632:	10 f0       	brcs	.+4      	; 0x638 <__utoa_common+0x14>
 634:	a4 1b       	sub	r26, r20
 636:	83 95       	inc	r24
 638:	50 51       	subi	r21, 0x10	; 16
 63a:	b9 f7       	brne	.-18     	; 0x62a <__utoa_common+0x6>
 63c:	a0 5d       	subi	r26, 0xD0	; 208
 63e:	aa 33       	cpi	r26, 0x3A	; 58
 640:	08 f0       	brcs	.+2      	; 0x644 <__utoa_common+0x20>
 642:	a9 5d       	subi	r26, 0xD9	; 217
 644:	a1 93       	st	Z+, r26
 646:	00 97       	sbiw	r24, 0x00	; 0
 648:	79 f7       	brne	.-34     	; 0x628 <__utoa_common+0x4>
 64a:	b1 11       	cpse	r27, r1
 64c:	b1 93       	st	Z+, r27
 64e:	11 92       	st	Z+, r1
 650:	cb 01       	movw	r24, r22
 652:	0c 94 2b 03 	jmp	0x656	; 0x656 <strrev>

00000656 <strrev>:
 656:	dc 01       	movw	r26, r24
 658:	fc 01       	movw	r30, r24
 65a:	67 2f       	mov	r22, r23
 65c:	71 91       	ld	r23, Z+
 65e:	77 23       	and	r23, r23
 660:	e1 f7       	brne	.-8      	; 0x65a <strrev+0x4>
 662:	32 97       	sbiw	r30, 0x02	; 2
 664:	04 c0       	rjmp	.+8      	; 0x66e <strrev+0x18>
 666:	7c 91       	ld	r23, X
 668:	6d 93       	st	X+, r22
 66a:	70 83       	st	Z, r23
 66c:	62 91       	ld	r22, -Z
 66e:	ae 17       	cp	r26, r30
 670:	bf 07       	cpc	r27, r31
 672:	c8 f3       	brcs	.-14     	; 0x666 <strrev+0x10>
 674:	08 95       	ret

00000676 <_exit>:
 676:	f8 94       	cli

00000678 <__stop_program>:
 678:	ff cf       	rjmp	.-2      	; 0x678 <__stop_program>
